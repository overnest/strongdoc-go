// Code generated by protoc-gen-go. DO NOT EDIT.
// source: strongdoc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetConfigurationReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigurationReq) Reset()         { *m = GetConfigurationReq{} }
func (m *GetConfigurationReq) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationReq) ProtoMessage()    {}
func (*GetConfigurationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{0}
}

func (m *GetConfigurationReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationReq.Unmarshal(m, b)
}
func (m *GetConfigurationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationReq.Marshal(b, m, deterministic)
}
func (m *GetConfigurationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationReq.Merge(m, src)
}
func (m *GetConfigurationReq) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationReq.Size(m)
}
func (m *GetConfigurationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationReq proto.InternalMessageInfo

type GetConfigurationResp struct {
	Configuration        string   `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigurationResp) Reset()         { *m = GetConfigurationResp{} }
func (m *GetConfigurationResp) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationResp) ProtoMessage()    {}
func (*GetConfigurationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{1}
}

func (m *GetConfigurationResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationResp.Unmarshal(m, b)
}
func (m *GetConfigurationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationResp.Marshal(b, m, deterministic)
}
func (m *GetConfigurationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationResp.Merge(m, src)
}
func (m *GetConfigurationResp) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationResp.Size(m)
}
func (m *GetConfigurationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationResp proto.InternalMessageInfo

func (m *GetConfigurationResp) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

func init() {
	proto.RegisterType((*GetConfigurationReq)(nil), "proto.GetConfigurationReq")
	proto.RegisterType((*GetConfigurationResp)(nil), "proto.GetConfigurationResp")
}

func init() { proto.RegisterFile("strongdoc.proto", fileDescriptor_d003557e9d9c9339) }

var fileDescriptor_d003557e9d9c9339 = []byte{
	// 2149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xeb, 0x6e, 0x1c, 0xb7,
	0x19, 0xcd, 0xb8, 0x88, 0x9b, 0xd0, 0x96, 0xb4, 0xa6, 0xf6, 0x22, 0xaf, 0x64, 0x79, 0xc4, 0xa6,
	0x91, 0xeb, 0x46, 0x5a, 0x5b, 0x69, 0x9a, 0xd6, 0x4d, 0xdb, 0xac, 0xb5, 0x8a, 0x2a, 0x58, 0x4a,
	0x14, 0x6d, 0x9c, 0x02, 0x05, 0x8a, 0x80, 0x9a, 0xe1, 0xce, 0x4e, 0xb4, 0x1a, 0x52, 0x24, 0x57,
	0xf6, 0xc6, 0x35, 0x7a, 0x41, 0x2f, 0x69, 0x81, 0xfe, 0x88, 0x8b, 0x16, 0x68, 0xd1, 0x5f, 0xed,
	0x33, 0xf4, 0x3d, 0x0a, 0xf4, 0x15, 0xfa, 0x00, 0x7d, 0x84, 0x82, 0x73, 0xe1, 0x92, 0x73, 0xd1,
	0xda, 0x40, 0x7e, 0x2d, 0xe6, 0x1c, 0xf2, 0x3b, 0x87, 0xe4, 0x37, 0xdf, 0x90, 0x5c, 0xb0, 0x20,
	0x24, 0xa7, 0x51, 0xe0, 0x53, 0x6f, 0x93, 0x71, 0x2a, 0x29, 0x7c, 0x39, 0xfe, 0x69, 0xaf, 0x04,
	0x94, 0x06, 0x23, 0xd2, 0xc1, 0x2c, 0xec, 0xe0, 0x28, 0xa2, 0x12, 0xcb, 0x90, 0x46, 0x22, 0x69,
	0xd4, 0x7e, 0x23, 0xfe, 0xf1, 0x36, 0x02, 0x12, 0x6d, 0x88, 0x47, 0x38, 0x08, 0x08, 0xef, 0x50,
	0x16, 0xb7, 0x28, 0x69, 0x3d, 0xef, 0x53, 0x6f, 0x7c, 0x4a, 0x22, 0x99, 0x3e, 0x37, 0xb2, 0xe7,
	0xf7, 0x69, 0x5f, 0x52, 0x4e, 0x52, 0xf8, 0xaa, 0x20, 0x98, 0x7b, 0xc3, 0xac, 0x13, 0xf6, 0x3c,
	0x3a, 0x8e, 0x64, 0x16, 0x64, 0xee, 0x38, 0x1c, 0x8d, 0xc2, 0x28, 0x48, 0x1f, 0x6b, 0x24, 0xf2,
	0xf8, 0x24, 0x96, 0x4c, 0x10, 0xd4, 0x00, 0x8b, 0xbb, 0x44, 0x6e, 0xd3, 0x68, 0x10, 0x06, 0x63,
	0x1e, 0x1b, 0x38, 0x22, 0x67, 0xe8, 0x1d, 0x50, 0x2f, 0xc2, 0x82, 0xc1, 0xd7, 0xc0, 0x9c, 0x67,
	0x82, 0x4b, 0x8e, 0xeb, 0xdc, 0x7a, 0xf5, 0xc8, 0x06, 0xb7, 0xfe, 0xfd, 0x16, 0xa8, 0xf5, 0xe3,
	0x19, 0xea, 0x51, 0xaf, 0x4f, 0xf8, 0x79, 0xe8, 0x11, 0xf8, 0x6b, 0x07, 0xd4, 0x8f, 0x48, 0x10,
	0x0a, 0x49, 0xf8, 0x07, 0x3c, 0xc0, 0x51, 0xf8, 0x59, 0xdc, 0x1a, 0xae, 0x26, 0x56, 0x36, 0xcb,
	0xc8, 0x23, 0x72, 0xd6, 0xbe, 0x79, 0x21, 0x2f, 0x18, 0xfa, 0xe6, 0xaf, 0xfe, 0xf3, 0xdf, 0x3f,
	0x5d, 0xfa, 0x3a, 0x72, 0x3b, 0xe7, 0x77, 0x3b, 0xe9, 0x04, 0x74, 0x78, 0x49, 0xeb, 0x7b, 0xce,
	0x6d, 0xf8, 0xb9, 0x03, 0x9a, 0x47, 0x04, 0x7b, 0x32, 0x3c, 0xc7, 0x92, 0x7c, 0xb9, 0x46, 0x36,
	0x62, 0x23, 0xeb, 0x08, 0xd9, 0x46, 0xca, 0xc4, 0x94, 0x95, 0xbf, 0x38, 0x00, 0x1e, 0x91, 0x53,
	0x7a, 0x6e, 0xdb, 0x58, 0xd1, 0x32, 0x79, 0x4a, 0x99, 0xb8, 0x71, 0x01, 0x2b, 0x18, 0xda, 0x7e,
	0xd6, 0x85, 0xc7, 0x35, 0x30, 0x0f, 0x40, 0x97, 0x85, 0x0f, 0xc8, 0xa4, 0x3b, 0x96, 0x43, 0xf8,
	0x52, 0xec, 0xeb, 0xd6, 0xed, 0xd7, 0x6d, 0x5f, 0xf9, 0x00, 0x9d, 0x27, 0x03, 0xca, 0x3d, 0xf2,
	0x14, 0x9e, 0x01, 0xb0, 0x17, 0x9d, 0x87, 0x92, 0x3c, 0x14, 0x84, 0xc3, 0x7a, 0xaa, 0x38, 0x85,
	0x94, 0x8f, 0x46, 0x09, 0x2a, 0x18, 0xfa, 0x76, 0xb5, 0xfe, 0x32, 0x6a, 0x9a, 0xfa, 0xa1, 0xee,
	0xa8, 0xe6, 0xe2, 0x37, 0x0e, 0x58, 0xd8, 0x0f, 0x85, 0x8c, 0xc3, 0x25, 0xef, 0x01, 0xbc, 0x9e,
	0x4a, 0xe4, 0x70, 0xa5, 0xde, 0xae, 0xa2, 0x04, 0x43, 0xdf, 0xab, 0xb6, 0xe0, 0xa2, 0x65, 0xd3,
	0xc2, 0xc8, 0xee, 0xad, 0x7c, 0xfc, 0xde, 0x01, 0xb5, 0x23, 0x72, 0x4e, 0x4f, 0xc8, 0x94, 0x80,
	0x6d, 0x3d, 0xe7, 0x36, 0xa1, 0x9c, 0x2c, 0x57, 0x72, 0x82, 0xa1, 0x77, 0xaa, 0xad, 0xac, 0xa1,
	0x15, 0x7b, 0x35, 0xec, 0xee, 0xca, 0xcb, 0x04, 0x5c, 0xcd, 0x52, 0x2d, 0x5e, 0x88, 0x66, 0x2e,
	0xff, 0xb2, 0xa5, 0x68, 0x95, 0xe2, 0x82, 0xa1, 0xef, 0x54, 0xcb, 0xdf, 0x40, 0x4b, 0x65, 0x6f,
	0x4b, 0xb6, 0x1c, 0xcf, 0x1c, 0x00, 0x77, 0x89, 0x54, 0x8f, 0x87, 0x3c, 0x4e, 0xde, 0x07, 0x64,
	0x22, 0x74, 0x6a, 0x16, 0x29, 0x33, 0x35, 0xcb, 0x58, 0xc1, 0xd0, 0x0f, 0xab, 0xdd, 0xbc, 0x86,
	0x6e, 0x2a, 0x37, 0x59, 0x85, 0xeb, 0x04, 0x85, 0x08, 0x99, 0xa9, 0x7e, 0xc2, 0x3c, 0xf0, 0x07,
	0x07, 0x44, 0x62, 0x1f, 0x4b, 0xac, 0x4d, 0x15, 0x29, 0xd3, 0x54, 0x19, 0xfb, 0x62, 0xa6, 0x44,
	0x21, 0x42, 0xfa, 0x12, 0x2f, 0xa6, 0xb1, 0x55, 0x5f, 0xed, 0x2a, 0xa7, 0x6b, 0x72, 0xca, 0xd6,
	0xea, 0x45, 0xb4, 0x60, 0xe8, 0xdd, 0x6a, 0x5f, 0x69, 0xa1, 0xcb, 0xfb, 0x32, 0x43, 0x28, 0x63,
	0x9f, 0x82, 0x57, 0xd5, 0xdb, 0xa1, 0x28, 0x01, 0x17, 0x8d, 0xf7, 0x25, 0x46, 0x94, 0x87, 0x7a,
	0x11, 0x14, 0x0c, 0x6d, 0x55, 0x2b, 0xb7, 0x60, 0x23, 0xff, 0xfa, 0x24, 0xe1, 0xcf, 0x00, 0x48,
	0xea, 0x91, 0x55, 0x30, 0xa6, 0x90, 0x59, 0x30, 0x4c, 0xf4, 0x85, 0x0a, 0x06, 0xd7, 0x1d, 0xd5,
	0xf0, 0xbe, 0x70, 0x00, 0x3c, 0xe4, 0x84, 0x61, 0x4e, 0x0e, 0x39, 0x3d, 0xa5, 0x69, 0xb1, 0xca,
	0x92, 0xa1, 0x48, 0x99, 0xc9, 0x50, 0xc6, 0x0a, 0x86, 0x7e, 0x50, 0xed, 0xe5, 0x6b, 0x68, 0xd5,
	0xf4, 0xc2, 0x0a, 0x01, 0x94, 0xa7, 0x31, 0xb8, 0x62, 0x7a, 0x69, 0x68, 0x35, 0xcb, 0x44, 0xb3,
	0x0c, 0x16, 0x0c, 0xbd, 0x5d, 0xad, 0xbe, 0x82, 0x5a, 0xb6, 0xba, 0x25, 0x7b, 0x06, 0x40, 0x8f,
	0x68, 0xd5, 0x6c, 0xf6, 0xa7, 0x90, 0x39, 0xfb, 0x26, 0xfa, 0x42, 0xb3, 0xef, 0x13, 0x5b, 0x72,
	0x4e, 0x65, 0x4d, 0x2f, 0xcd, 0x41, 0x01, 0x5b, 0x46, 0x2e, 0x69, 0x54, 0x09, 0x2f, 0x95, 0x13,
	0xea, 0x6b, 0x59, 0xad, 0x0d, 0x61, 0x2d, 0x4d, 0xf1, 0x38, 0xc9, 0x7a, 0xd4, 0x13, 0xf0, 0x33,
	0x30, 0x9f, 0xa4, 0x4e, 0x16, 0x05, 0x2e, 0x59, 0x19, 0x95, 0xc1, 0x4a, 0xf4, 0x7a, 0x05, 0x23,
	0x18, 0x7a, 0xb3, 0x5a, 0x75, 0xe9, 0x76, 0x33, 0x53, 0x4d, 0x72, 0xad, 0xf3, 0xc4, 0xa7, 0xde,
	0x5e, 0xef, 0x29, 0xfc, 0x10, 0xd4, 0x1f, 0xb2, 0x11, 0xc5, 0x7e, 0x16, 0xaa, 0x2f, 0x39, 0xc1,
	0xa7, 0xfa, 0x0b, 0xa5, 0xc9, 0x04, 0x37, 0xbf, 0x50, 0x05, 0x4a, 0x30, 0xf4, 0xd2, 0x2d, 0x07,
	0x7e, 0x02, 0x96, 0x76, 0xb6, 0x76, 0x76, 0x4a, 0xc3, 0x66, 0x69, 0x6a, 0x35, 0x98, 0x86, 0x5e,
	0xbd, 0x88, 0x4e, 0xc2, 0xdf, 0x71, 0xa0, 0x0f, 0x96, 0x55, 0x83, 0x34, 0xd5, 0x7b, 0xf4, 0x51,
	0x64, 0x2a, 0x41, 0xd7, 0x08, 0x52, 0x6c, 0xa3, 0x64, 0xd6, 0x66, 0xb4, 0x50, 0x4a, 0xd0, 0x03,
	0x6d, 0xc5, 0xe7, 0xc3, 0xa7, 0x03, 0xb9, 0x69, 0x84, 0x30, 0x9a, 0x4c, 0x87, 0xe2, 0x5e, 0xdc,
	0x40, 0x49, 0xdc, 0x71, 0xe0, 0x09, 0x98, 0xb7, 0xe7, 0x49, 0xd7, 0x33, 0x0d, 0x9b, 0xf5, 0xcc,
	0x00, 0x05, 0x43, 0x9b, 0xd5, 0x0b, 0xbe, 0x88, 0xe6, 0xb3, 0x05, 0x1f, 0xc7, 0x7d, 0x54, 0x6a,
	0xff, 0x18, 0x34, 0x2b, 0x46, 0x93, 0x7d, 0xea, 0x4b, 0x47, 0xb2, 0x52, 0x4d, 0xa6, 0xa3, 0x78,
	0x0c, 0x6a, 0x85, 0x55, 0x68, 0x14, 0x7b, 0x99, 0x25, 0x22, 0x3f, 0xdf, 0x6f, 0x55, 0x8f, 0xa5,
	0x0d, 0x97, 0xb2, 0xb1, 0xf8, 0x69, 0x2f, 0x9d, 0xbe, 0x1f, 0x83, 0xc6, 0x4e, 0xb2, 0xf1, 0xcf,
	0x8d, 0x28, 0x4b, 0xd2, 0x29, 0x3b, 0x1d, 0xd0, 0x72, 0x25, 0xa7, 0x53, 0x8c, 0x82, 0x85, 0x5c,
	0x5c, 0x5d, 0x7d, 0xa6, 0xb8, 0x59, 0x7d, 0x4c, 0x54, 0x30, 0xd4, 0xa9, 0x1e, 0x4e, 0x1d, 0x2d,
	0x64, 0xc3, 0x49, 0xcf, 0x2c, 0x6a, 0x6d, 0x3e, 0x06, 0x8d, 0x1e, 0xb9, 0x68, 0x20, 0x53, 0xb6,
	0x38, 0x90, 0x22, 0xa7, 0x07, 0x22, 0xc1, 0x42, 0x2e, 0xae, 0x51, 0x46, 0xcb, 0x06, 0x62, 0xa2,
	0x82, 0xa1, 0x6f, 0x55, 0x0f, 0xe4, 0x3a, 0x6c, 0xe9, 0x75, 0x49, 0x3a, 0xe9, 0x65, 0xf9, 0xb3,
	0x03, 0xea, 0xe9, 0x8b, 0xd5, 0x1f, 0xc6, 0x6f, 0x57, 0xaa, 0xbd, 0x6a, 0x7f, 0xa6, 0x2c, 0xd2,
	0x3c, 0x88, 0x94, 0xf3, 0xcf, 0xb5, 0xef, 0x54, 0x7e, 0x58, 0x49, 0xf7, 0x64, 0xdf, 0x39, 0x67,
	0xfb, 0xc9, 0x8a, 0x7b, 0xc1, 0xc8, 0x52, 0x39, 0x31, 0x23, 0x53, 0x51, 0x23, 0x73, 0x20, 0xf2,
	0xd2, 0x3f, 0x03, 0x0b, 0x0f, 0x23, 0x0b, 0x9d, 0xd6, 0x58, 0x1b, 0xb7, 0x6a, 0x6c, 0x9e, 0x9a,
	0xb1, 0x8d, 0x41, 0x50, 0xbf, 0xf6, 0xba, 0x67, 0xba, 0xc1, 0xac, 0xa7, 0xdf, 0xa9, 0xae, 0xa7,
	0x76, 0xe1, 0x3f, 0x0a, 0x85, 0xa4, 0x7c, 0xa2, 0x17, 0xa4, 0x8c, 0x34, 0x17, 0xa4, 0x9c, 0x17,
	0x0c, 0x7d, 0xb7, 0xda, 0xcd, 0x2a, 0x5c, 0xc9, 0x7d, 0xeb, 0x6c, 0xed, 0x1d, 0xf0, 0xf2, 0x3e,
	0x0d, 0xc2, 0x08, 0x2e, 0x64, 0x22, 0xea, 0x49, 0xa9, 0xd6, 0x6c, 0x40, 0x30, 0x74, 0xdd, 0x2c,
	0x6b, 0x78, 0x2c, 0x87, 0x9d, 0x91, 0xe2, 0xd4, 0xd8, 0x30, 0xb8, 0x9a, 0xa6, 0x4b, 0x12, 0xad,
	0x69, 0xe7, 0x90, 0x0e, 0xda, 0x2a, 0xc5, 0x05, 0x43, 0xae, 0xb9, 0x78, 0x71, 0x6c, 0x66, 0x34,
	0x51, 0x12, 0x3f, 0x55, 0xdb, 0x9f, 0x18, 0x8a, 0x87, 0xd7, 0xb0, 0x23, 0x29, 0xcc, 0xde, 0xfe,
	0x18, 0xb0, 0x60, 0xe8, 0x66, 0xf2, 0xba, 0xa0, 0x7a, 0x3e, 0xbe, 0x6a, 0xa1, 0xc2, 0x1f, 0x80,
	0xaf, 0xf6, 0x39, 0xdb, 0x8b, 0x42, 0x09, 0xaf, 0x65, 0x79, 0x97, 0x3c, 0xab, 0xb0, 0x30, 0x0f,
	0x09, 0x86, 0x96, 0xe3, 0x90, 0x0d, 0x54, 0xd3, 0x21, 0x45, 0xc2, 0xaa, 0x70, 0x1f, 0x82, 0x57,
	0xfa, 0x9c, 0x1d, 0x72, 0x4a, 0x07, 0xd0, 0xe8, 0x1c, 0x03, 0x2a, 0xe0, 0x62, 0x01, 0x13, 0x0c,
	0xad, 0xc4, 0x11, 0x9b, 0xe8, 0x9a, 0x19, 0x31, 0xa6, 0x93, 0xf2, 0x74, 0x79, 0x9f, 0x06, 0x74,
	0x2c, 0xa1, 0xb1, 0x34, 0x74, 0x1c, 0xfb, 0xbb, 0x96, 0x43, 0x04, 0x43, 0xeb, 0xd5, 0x49, 0x71,
	0x15, 0x01, 0xa5, 0x30, 0x4a, 0xa2, 0x1d, 0x83, 0xcb, 0xfd, 0xf8, 0x96, 0x47, 0xc7, 0x4d, 0x1e,
	0xcd, 0xb8, 0x19, 0x32, 0x63, 0x8b, 0x03, 0xf5, 0x16, 0x27, 0xb9, 0x37, 0xea, 0x3c, 0x39, 0x1b,
	0x13, 0x3e, 0x79, 0x0a, 0x7f, 0xe9, 0x80, 0xf9, 0xae, 0xef, 0xab, 0x37, 0x19, 0x1f, 0x8f, 0xc8,
	0x07, 0x3c, 0xd0, 0xfb, 0x2b, 0x1b, 0x36, 0xf7, 0x57, 0x79, 0x46, 0x30, 0x74, 0xaf, 0x5a, 0xfc,
	0xe6, 0x56, 0xdb, 0xdc, 0x51, 0x62, 0xab, 0xb3, 0x9a, 0xbf, 0x3f, 0x3a, 0xe0, 0x5a, 0xb2, 0x65,
	0x33, 0x6d, 0x2c, 0x5b, 0x9b, 0xb9, 0x9c, 0x93, 0x95, 0x6a, 0x52, 0x30, 0xf4, 0xfd, 0x6a, 0x33,
	0x68, 0xeb, 0x46, 0xf1, 0x70, 0x91, 0xf3, 0xf3, 0x57, 0x07, 0xd4, 0xfb, 0x44, 0x1e, 0x8c, 0x47,
	0x32, 0xdc, 0x27, 0xe7, 0x64, 0xa4, 0xf8, 0x30, 0x0a, 0xa0, 0x71, 0x7a, 0x2b, 0x90, 0x66, 0x3d,
	0x28, 0xe7, 0x67, 0x1c, 0xef, 0xda, 0xd6, 0x3d, 0x96, 0x28, 0x09, 0xa1, 0xbc, 0xa9, 0xf5, 0xea,
	0x13, 0xd9, 0x4d, 0x9a, 0xed, 0x45, 0x03, 0xaa, 0xd7, 0xcb, 0x86, 0xcd, 0xf5, 0xca, 0x33, 0x33,
	0xd6, 0xab, 0xdd, 0xce, 0x39, 0x31, 0x3a, 0x2b, 0x0f, 0xbf, 0x70, 0xc0, 0xb5, 0x5d, 0x22, 0xef,
	0x27, 0x77, 0x8c, 0x3d, 0x22, 0x71, 0x38, 0x12, 0x7a, 0xbd, 0x0a, 0x8c, 0xb9, 0x5e, 0x25, 0xa4,
	0x60, 0xe8, 0x4e, 0xb5, 0x99, 0x06, 0x5c, 0x34, 0xcd, 0xa4, 0xf7, 0x9a, 0xf0, 0xef, 0x0e, 0x68,
	0x4d, 0x63, 0xbd, 0xc7, 0xc9, 0xd9, 0x98, 0x44, 0xde, 0x44, 0x15, 0x62, 0xb8, 0x56, 0xd0, 0xb2,
	0x78, 0x65, 0x07, 0xcd, 0x6a, 0x32, 0x63, 0x86, 0xe0, 0x8d, 0x12, 0x53, 0x9d, 0x41, 0x16, 0x03,
	0xfe, 0xc3, 0x01, 0xad, 0x3e, 0x91, 0xef, 0x93, 0xc7, 0x85, 0xf8, 0xda, 0x5e, 0x05, 0x6f, 0xda,
	0xab, 0x6c, 0xf2, 0x42, 0xa9, 0x94, 0xd9, 0x13, 0x44, 0xea, 0x10, 0x6a, 0x19, 0x7f, 0x0e, 0x16,
	0x76, 0x89, 0xdc, 0xc7, 0x3c, 0x20, 0x1f, 0x71, 0x3c, 0x18, 0x84, 0x9e, 0xfe, 0xe8, 0xe6, 0x70,
	0xf3, 0xa3, 0x5b, 0xa0, 0x9e, 0x6b, 0x7f, 0xaa, 0xef, 0x0e, 0x4c, 0x35, 0x0a, 0xe6, 0x77, 0xcb,
	0x53, 0x79, 0xb7, 0x32, 0x95, 0x77, 0x8b, 0xa9, 0x7c, 0xab, 0x5a, 0x7d, 0x0e, 0x5e, 0x31, 0xd4,
	0xe1, 0x09, 0xb8, 0x92, 0x5e, 0x52, 0xc5, 0x6a, 0x0d, 0xfb, 0xe2, 0x2a, 0x93, 0x6a, 0x96, 0xc1,
	0xcf, 0x75, 0x70, 0xcd, 0x46, 0x39, 0x56, 0x07, 0xf2, 0x2f, 0x1c, 0x00, 0xb7, 0x87, 0x38, 0x0a,
	0xe2, 0xd3, 0xf3, 0x21, 0x16, 0xe2, 0x11, 0xe5, 0xbe, 0xbe, 0xa9, 0x28, 0x52, 0xe6, 0x4d, 0x45,
	0x19, 0x3b, 0xe3, 0xa6, 0xa2, 0x6d, 0xdd, 0x54, 0x78, 0x85, 0x00, 0xe9, 0x4d, 0x45, 0xbf, 0x64,
	0x02, 0xfa, 0xe5, 0x13, 0xd0, 0xcf, 0x4d, 0xc0, 0x45, 0x37, 0x15, 0xed, 0x56, 0xae, 0x66, 0x64,
	0x3d, 0x95, 0xec, 0xe3, 0xe4, 0x92, 0x77, 0x9b, 0x13, 0x3f, 0x94, 0xdb, 0x98, 0xfb, 0xf6, 0x25,
	0xaf, 0x81, 0xe7, 0x2f, 0x79, 0x2d, 0x6a, 0xc6, 0xa9, 0x0e, 0xc6, 0x5f, 0xe7, 0x2c, 0xdb, 0xbd,
	0x58, 0xe6, 0xb7, 0x0e, 0xa8, 0x75, 0x7d, 0xff, 0x10, 0x4f, 0xd4, 0x0e, 0xf1, 0x80, 0xc8, 0x21,
	0xf5, 0xf5, 0xa9, 0x21, 0x4f, 0x98, 0xa7, 0x86, 0x22, 0x37, 0x63, 0x3b, 0x87, 0xae, 0x9b, 0xea,
	0xcc, 0xec, 0xab, 0xa6, 0xe0, 0x9f, 0x49, 0x45, 0xe8, 0x91, 0x01, 0x1e, 0x8f, 0xa4, 0xed, 0xc7,
	0xa8, 0x08, 0x65, 0x7c, 0xae, 0x22, 0x94, 0x37, 0x11, 0x0c, 0x75, 0xab, 0xdd, 0xbd, 0xde, 0x5e,
	0xab, 0x74, 0xd7, 0xf1, 0x93, 0x80, 0xca, 0xe5, 0xdf, 0x1c, 0xb0, 0x98, 0x7c, 0x52, 0x6d, 0x87,
	0xf6, 0xbf, 0x0f, 0x05, 0x77, 0xab, 0x17, 0xd1, 0x82, 0xa1, 0x5e, 0xb5, 0xb3, 0x6f, 0xdc, 0x5e,
	0xaf, 0x76, 0x96, 0x5d, 0xc7, 0xb0, 0x53, 0x75, 0x6e, 0xe2, 0xe0, 0xaa, 0x4a, 0x89, 0x34, 0xbc,
	0xd0, 0x5b, 0x59, 0x13, 0x34, 0xb7, 0xb2, 0x36, 0x2e, 0x18, 0xba, 0x5b, 0x6d, 0xa3, 0x09, 0xeb,
	0x25, 0x36, 0xc4, 0xfd, 0xff, 0x5d, 0x7a, 0xd6, 0xfd, 0xd7, 0x25, 0xf8, 0x36, 0x98, 0xd3, 0x7f,
	0x6c, 0xb9, 0xdd, 0xc3, 0x3d, 0xb4, 0x06, 0x40, 0x02, 0xf4, 0xf1, 0x48, 0xb6, 0x17, 0xc3, 0x68,
	0x40, 0xdf, 0x4d, 0xfe, 0x1c, 0x14, 0x78, 0x24, 0x37, 0x3d, 0x7a, 0xba, 0xf5, 0x95, 0xbb, 0x9b,
	0x77, 0xb6, 0x6a, 0x98, 0xb1, 0x51, 0xe8, 0x25, 0xff, 0xb3, 0x7c, 0x2a, 0x68, 0x74, 0xaf, 0x80,
	0xfc, 0xe4, 0x0f, 0x0e, 0xf8, 0x9d, 0x63, 0x79, 0x9a, 0xbc, 0x72, 0x09, 0xfa, 0x1f, 0x0d, 0x89,
	0xab, 0xde, 0x5b, 0x77, 0xfd, 0x3e, 0xc1, 0x9c, 0xf0, 0x75, 0x17, 0x47, 0xbe, 0x8b, 0x5d, 0xc1,
	0xb0, 0x47, 0xdc, 0x50, 0xb8, 0xaa, 0x96, 0x87, 0x9c, 0xf8, 0xee, 0x31, 0x19, 0x50, 0x4e, 0x5c,
	0x39, 0x24, 0xae, 0xa4, 0x27, 0x24, 0xda, 0x04, 0xef, 0x51, 0xee, 0x92, 0xc7, 0xf8, 0x94, 0x8d,
	0xc8, 0x1b, 0x20, 0xe9, 0xee, 0xaa, 0x6d, 0x2b, 0x89, 0x64, 0x2a, 0xfd, 0x49, 0xdc, 0xb2, 0x3d,
	0xa7, 0xf4, 0x28, 0x4f, 0xff, 0x09, 0x72, 0x2f, 0xf1, 0x3d, 0xd0, 0x3a, 0x50, 0xc1, 0xf0, 0x31,
	0x1d, 0x4b, 0x37, 0x38, 0x3a, 0xdc, 0xde, 0xd8, 0xc5, 0x92, 0x3c, 0xc2, 0x13, 0xb8, 0x39, 0x94,
	0x92, 0x89, 0x7b, 0x9d, 0x4e, 0x10, 0xca, 0xe1, 0xf8, 0x58, 0x0d, 0xb2, 0x13, 0x70, 0xe6, 0x6d,
	0x10, 0x8f, 0x8a, 0x89, 0x90, 0x24, 0x7d, 0x0c, 0x92, 0xf6, 0x00, 0x79, 0xf4, 0x74, 0xd3, 0x98,
	0x94, 0xe9, 0x9f, 0xa7, 0xc2, 0x3f, 0x49, 0xd6, 0xe8, 0xfe, 0xbc, 0x9e, 0xd6, 0x43, 0xf5, 0xfc,
	0xb9, 0xe3, 0x1c, 0x5f, 0x8e, 0x99, 0x37, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xce, 0x23, 0xd2,
	0xea, 0x6d, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StrongDocServiceClient is the client API for StrongDocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StrongDocServiceClient interface {
	// Registers a new organization
	//
	// The user who created the organization is automatically an administrator
	//
	// Does not require Login
	RegisterOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error)
	// Reactivate an organization that was unsubscribed via aws
	//
	// The user reactivating the organization becomes the administrator
	//
	// Does not require login
	ReactivateOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error)
	// Remove an organization and its search indexes
	//
	// Requires Administrator privilege. Only an administrator can remove the whole organization
	//
	// Requires Login
	RemoveOrganization(ctx context.Context, in *RemoveOrganizationReq, opts ...grpc.CallOption) (*RemoveOrganizationResp, error)
	// InviteUser
	// Requires administrator privilege
	InviteUser(ctx context.Context, in *InviteUserReq, opts ...grpc.CallOption) (*InviteUserResp, error)
	// ListInvitations
	// Requires administrator privilege
	ListInvitations(ctx context.Context, in *ListInvitationsReq, opts ...grpc.CallOption) (*ListInvitationsResp, error)
	// ListInvitations
	// Requires administrator privilege
	RevokeInvitation(ctx context.Context, in *RevokeInvitationReq, opts ...grpc.CallOption) (*RevokeInvitationResp, error)
	// Register new user
	//
	// Creates new user if it doesn't already exist. If the user already exist, and
	// error is thrown
	//
	// Does not require Login
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error)
	// Get user private keys
	//
	// Requires Login
	GetUserPrivateKeys(ctx context.Context, in *GetUserPrivateKeysReq, opts ...grpc.CallOption) (*GetUserPrivateKeysResp, error)
	// Sets the user's kdf metadata for a new passwordKey
	//
	// Requires Login
	SetUserKdfMetadata(ctx context.Context, in *SetUserKdfMetadataReq, opts ...grpc.CallOption) (*SetUserKdfMetadataResp, error)
	// Sets the user's authentication metadata
	//
	// Requires Login
	SetUserAuthMetadata(ctx context.Context, in *SetUserAuthMetadataReq, opts ...grpc.CallOption) (*SetUserAuthMetadataResp, error)
	// List the users of the organization
	//
	// Requires Login
	ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error)
	// Remove user from organization
	//
	// Removes the user from the organization. The users documents still exists,
	// but belong to the organization, only accessible by organization admin.
	//
	// Requires administrator privilege.
	RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserResp, error)
	// Prepare to promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PreparePromoteUser(ctx context.Context, in *PreparePromoteUserReq, opts ...grpc.CallOption) (*PreparePromoteUserResp, error)
	// Promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PromoteUser(ctx context.Context, in *PromoteUserReq, opts ...grpc.CallOption) (*PromoteUserResp, error)
	// Demote administrator to regular user at the organization. Attempting to
	// demote the last administrator of an organization will fail
	//
	// Requires administrator privilege.
	DemoteUser(ctx context.Context, in *DemoteUserReq, opts ...grpc.CallOption) (*DemoteUserResp, error)
	// List the documents the user can access
	//
	// Administrators can see all documents belonging to the organization
	//
	// Requires Login
	ListDocuments(ctx context.Context, in *ListDocumentsReq, opts ...grpc.CallOption) (*ListDocumentsResp, error)
	// Remove document the user can access
	//
	// Admin user can remove document for the whole organization
	// Regular user only can remove document for him/herself
	//
	// Requires Login
	RemoveDocument(ctx context.Context, in *RemoveDocumentReq, opts ...grpc.CallOption) (*RemoveDocumentResp, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_UploadDocumentStreamClient, error)
	E2EEUploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_E2EEUploadDocumentStreamClient, error)
	E2EEPrepareDownloadDocument(ctx context.Context, in *E2EEPrepareDownloadDocReq, opts ...grpc.CallOption) (*E2EEPrepareDownloadDocResp, error)
	E2EEDownloadDocumentStream(ctx context.Context, in *E2EEDownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_E2EEDownloadDocumentStreamClient, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocument(ctx context.Context, in *UploadDocReq, opts ...grpc.CallOption) (*UploadDocResp, error)
	// Download document stream
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocumentStream(ctx context.Context, in *DownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_DownloadDocumentStreamClient, error)
	// Download document
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocument(ctx context.Context, in *DownloadDocReq, opts ...grpc.CallOption) (*DownloadDocResp, error)
	// Encrypt document stream encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_EncryptDocumentStreamClient, error)
	// Encrypt document encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocument(ctx context.Context, in *EncryptDocReq, opts ...grpc.CallOption) (*EncryptDocResp, error)
	// Decrypt document stream decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	//
	// Requires Login
	DecryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_DecryptDocumentStreamClient, error)
	// Decrypt document decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	DecryptDocument(ctx context.Context, in *DecryptDocReq, opts ...grpc.CallOption) (*DecryptDocResp, error)
	// PrepareShare a document to another user
	//
	// Requires Login
	PrepareShareDocument(ctx context.Context, in *PrepareShareDocumentReq, opts ...grpc.CallOption) (*PrepareShareDocumentResp, error)
	// Share a document to another user
	//
	// Requires Login
	ShareDocument(ctx context.Context, in *ShareDocumentReq, opts ...grpc.CallOption) (*ShareDocumentResp, error)
	// Unshare a document that had previously been shared to a user
	//
	// Requires Login
	UnshareDocument(ctx context.Context, in *UnshareDocumentReq, opts ...grpc.CallOption) (*UnshareDocumentResp, error)
	ListDocActionHistory(ctx context.Context, in *ListDocActionHistoryReq, opts ...grpc.CallOption) (*ListDocActionHistoryResp, error)
	// Obtain an authentication token to be used with other APIs
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// Obtain the metadata needed to attempt to login with a specified user
	PrepareLogin(ctx context.Context, in *PrepareLoginReq, opts ...grpc.CallOption) (*PrepareLoginResp, error)
	// Obtain the metadata needed to attempt to authenticate with a specified user
	//
	// Requires Login
	PrepareAuth(ctx context.Context, in *PrepareAuthReq, opts ...grpc.CallOption) (*PrepareAuthResp, error)
	// The first step in the SRP login proccess
	SrpInit(ctx context.Context, in *SrpInitReq, opts ...grpc.CallOption) (*SrpInitResp, error)
	// The second and final step in the SRP login proccess
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	SrpProof(ctx context.Context, in *SrpProofReq, opts ...grpc.CallOption) (*SrpProofResp, error)
	// Logout current user
	//
	// Requires Login
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// Search within a list of user's accessible documents
	//
	// The response will include a list document id and its score when matches are found
	//
	// Requires Login
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	//Add a sharable organization to the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	AddSharableOrg(ctx context.Context, in *AddSharableOrgReq, opts ...grpc.CallOption) (*AddSharableOrgResp, error)
	//Remove a sharable organization from the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	RemoveSharableOrg(ctx context.Context, in *RemoveSharableOrgReq, opts ...grpc.CallOption) (*RemoveSharableOrgResp, error)
	//Update the organization's multi-level sharing setting
	//
	//Requires Administrator privilege.
	//Requires Login
	SetMultiLevelSharing(ctx context.Context, in *SetMultiLevelSharingReq, opts ...grpc.CallOption) (*SetMultiLevelSharingResp, error)
	//Update the organization's account info
	//
	//Requires Administrator privilege.
	//Requires Login
	SetAccountInfo(ctx context.Context, in *SetAccountInfoReq, opts ...grpc.CallOption) (*SetAccountInfoResp, error)
	//List all items of the cost breakdown and also other details such as the billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingDetails(ctx context.Context, in *GetBillingDetailsReq, opts ...grpc.CallOption) (*GetBillingDetailsResp, error)
	//Obtain the list of billing frequencies (past, current and future)
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingFrequencyList(ctx context.Context, in *GetBillingFrequencyListReq, opts ...grpc.CallOption) (*GetBillingFrequencyListResp, error)
	//Change the next billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	SetNextBillingFrequency(ctx context.Context, in *SetNextBillingFrequencyReq, opts ...grpc.CallOption) (*SetNextBillingFrequencyResp, error)
	//Obtain the list of large traffic usages
	//
	//Requires Administrator privilege
	//Requires Login
	GetLargeTraffic(ctx context.Context, in *GetLargeTrafficReq, opts ...grpc.CallOption) (*GetLargeTrafficResp, error)
	//Obtain information about the account
	//
	//Requires Administrator privilege
	//Requires Login
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error)
	// Obtain information about logged in user
	//
	// Requires Login
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	// Change the password of a logged in user
	//
	// Requires Login
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...grpc.CallOption) (*ChangeUserPasswordResp, error)
	// Set information about a logged in user
	//
	// Requires Login
	SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error)
	// Obtain a list of the org's credit cards
	//
	// Requires Administrator privilege
	// Requires Login
	ListCreditCards(ctx context.Context, in *ListCreditCardsReq, opts ...grpc.CallOption) (*ListCreditCardsResp, error)
	// Add a payment method to the customer and validate the payment method
	//
	// Requires Administrator privilege
	// Requires Login
	AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*AddPaymentMethodResp, error)
	// Set the default payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodReq, opts ...grpc.CallOption) (*SetDefaultPaymentMethodResp, error)
	// Remove a payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	RemovePaymentMethod(ctx context.Context, in *RemovePaymentMethodReq, opts ...grpc.CallOption) (*RemovePaymentMethodResp, error)
	// List payments for the organization
	//
	// Requires Administrator privilege
	// Requires Login
	ListPayments(ctx context.Context, in *ListPaymentsReq, opts ...grpc.CallOption) (*ListPaymentsResp, error)
}

type strongDocServiceClient struct {
	cc *grpc.ClientConn
}

func NewStrongDocServiceClient(cc *grpc.ClientConn) StrongDocServiceClient {
	return &strongDocServiceClient{cc}
}

func (c *strongDocServiceClient) RegisterOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error) {
	out := new(RegisterOrganizationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RegisterOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ReactivateOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error) {
	out := new(RegisterOrganizationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ReactivateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveOrganization(ctx context.Context, in *RemoveOrganizationReq, opts ...grpc.CallOption) (*RemoveOrganizationResp, error) {
	out := new(RemoveOrganizationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) InviteUser(ctx context.Context, in *InviteUserReq, opts ...grpc.CallOption) (*InviteUserResp, error) {
	out := new(InviteUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsReq, opts ...grpc.CallOption) (*ListInvitationsResp, error) {
	out := new(ListInvitationsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RevokeInvitation(ctx context.Context, in *RevokeInvitationReq, opts ...grpc.CallOption) (*RevokeInvitationResp, error) {
	out := new(RevokeInvitationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RevokeInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error) {
	out := new(RegisterUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetUserPrivateKeys(ctx context.Context, in *GetUserPrivateKeysReq, opts ...grpc.CallOption) (*GetUserPrivateKeysResp, error) {
	out := new(GetUserPrivateKeysResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetUserPrivateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetUserKdfMetadata(ctx context.Context, in *SetUserKdfMetadataReq, opts ...grpc.CallOption) (*SetUserKdfMetadataResp, error) {
	out := new(SetUserKdfMetadataResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetUserKdfMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetUserAuthMetadata(ctx context.Context, in *SetUserAuthMetadataReq, opts ...grpc.CallOption) (*SetUserAuthMetadataResp, error) {
	out := new(SetUserAuthMetadataResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetUserAuthMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error) {
	out := new(ListUsersResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserResp, error) {
	out := new(RemoveUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PreparePromoteUser(ctx context.Context, in *PreparePromoteUserReq, opts ...grpc.CallOption) (*PreparePromoteUserResp, error) {
	out := new(PreparePromoteUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PreparePromoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PromoteUser(ctx context.Context, in *PromoteUserReq, opts ...grpc.CallOption) (*PromoteUserResp, error) {
	out := new(PromoteUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PromoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DemoteUser(ctx context.Context, in *DemoteUserReq, opts ...grpc.CallOption) (*DemoteUserResp, error) {
	out := new(DemoteUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsReq, opts ...grpc.CallOption) (*ListDocumentsResp, error) {
	out := new(ListDocumentsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveDocument(ctx context.Context, in *RemoveDocumentReq, opts ...grpc.CallOption) (*RemoveDocumentResp, error) {
	out := new(RemoveDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_UploadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[0], "/proto.StrongDocService/UploadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceUploadDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_UploadDocumentStreamClient interface {
	Send(*UploadDocStreamReq) error
	CloseAndRecv() (*UploadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceUploadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceUploadDocumentStreamClient) Send(m *UploadDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceUploadDocumentStreamClient) CloseAndRecv() (*UploadDocStreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) E2EEUploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_E2EEUploadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[1], "/proto.StrongDocService/E2EEUploadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceE2EEUploadDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_E2EEUploadDocumentStreamClient interface {
	Send(*E2EEUploadDocStreamReq) error
	Recv() (*E2EEUploadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceE2EEUploadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceE2EEUploadDocumentStreamClient) Send(m *E2EEUploadDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceE2EEUploadDocumentStreamClient) Recv() (*E2EEUploadDocStreamResp, error) {
	m := new(E2EEUploadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) E2EEPrepareDownloadDocument(ctx context.Context, in *E2EEPrepareDownloadDocReq, opts ...grpc.CallOption) (*E2EEPrepareDownloadDocResp, error) {
	out := new(E2EEPrepareDownloadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/E2EEPrepareDownloadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) E2EEDownloadDocumentStream(ctx context.Context, in *E2EEDownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_E2EEDownloadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[2], "/proto.StrongDocService/E2EEDownloadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceE2EEDownloadDocumentStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StrongDocService_E2EEDownloadDocumentStreamClient interface {
	Recv() (*E2EEDownloadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceE2EEDownloadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceE2EEDownloadDocumentStreamClient) Recv() (*E2EEDownloadDocStreamResp, error) {
	m := new(E2EEDownloadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) UploadDocument(ctx context.Context, in *UploadDocReq, opts ...grpc.CallOption) (*UploadDocResp, error) {
	out := new(UploadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UploadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DownloadDocumentStream(ctx context.Context, in *DownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_DownloadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[3], "/proto.StrongDocService/DownloadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceDownloadDocumentStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StrongDocService_DownloadDocumentStreamClient interface {
	Recv() (*DownloadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceDownloadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceDownloadDocumentStreamClient) Recv() (*DownloadDocStreamResp, error) {
	m := new(DownloadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) DownloadDocument(ctx context.Context, in *DownloadDocReq, opts ...grpc.CallOption) (*DownloadDocResp, error) {
	out := new(DownloadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DownloadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) EncryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_EncryptDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[4], "/proto.StrongDocService/EncryptDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceEncryptDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_EncryptDocumentStreamClient interface {
	Send(*EncryptDocStreamReq) error
	Recv() (*EncryptDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceEncryptDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceEncryptDocumentStreamClient) Send(m *EncryptDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceEncryptDocumentStreamClient) Recv() (*EncryptDocStreamResp, error) {
	m := new(EncryptDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) EncryptDocument(ctx context.Context, in *EncryptDocReq, opts ...grpc.CallOption) (*EncryptDocResp, error) {
	out := new(EncryptDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/EncryptDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DecryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_DecryptDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[5], "/proto.StrongDocService/DecryptDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceDecryptDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_DecryptDocumentStreamClient interface {
	Send(*DecryptDocStreamReq) error
	Recv() (*DecryptDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceDecryptDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceDecryptDocumentStreamClient) Send(m *DecryptDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceDecryptDocumentStreamClient) Recv() (*DecryptDocStreamResp, error) {
	m := new(DecryptDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) DecryptDocument(ctx context.Context, in *DecryptDocReq, opts ...grpc.CallOption) (*DecryptDocResp, error) {
	out := new(DecryptDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DecryptDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PrepareShareDocument(ctx context.Context, in *PrepareShareDocumentReq, opts ...grpc.CallOption) (*PrepareShareDocumentResp, error) {
	out := new(PrepareShareDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PrepareShareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ShareDocument(ctx context.Context, in *ShareDocumentReq, opts ...grpc.CallOption) (*ShareDocumentResp, error) {
	out := new(ShareDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ShareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UnshareDocument(ctx context.Context, in *UnshareDocumentReq, opts ...grpc.CallOption) (*UnshareDocumentResp, error) {
	out := new(UnshareDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UnshareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListDocActionHistory(ctx context.Context, in *ListDocActionHistoryReq, opts ...grpc.CallOption) (*ListDocActionHistoryResp, error) {
	out := new(ListDocActionHistoryResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListDocActionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PrepareLogin(ctx context.Context, in *PrepareLoginReq, opts ...grpc.CallOption) (*PrepareLoginResp, error) {
	out := new(PrepareLoginResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PrepareLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PrepareAuth(ctx context.Context, in *PrepareAuthReq, opts ...grpc.CallOption) (*PrepareAuthResp, error) {
	out := new(PrepareAuthResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PrepareAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SrpInit(ctx context.Context, in *SrpInitReq, opts ...grpc.CallOption) (*SrpInitResp, error) {
	out := new(SrpInitResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SrpInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SrpProof(ctx context.Context, in *SrpProofReq, opts ...grpc.CallOption) (*SrpProofResp, error) {
	out := new(SrpProofResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SrpProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) AddSharableOrg(ctx context.Context, in *AddSharableOrgReq, opts ...grpc.CallOption) (*AddSharableOrgResp, error) {
	out := new(AddSharableOrgResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/AddSharableOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveSharableOrg(ctx context.Context, in *RemoveSharableOrgReq, opts ...grpc.CallOption) (*RemoveSharableOrgResp, error) {
	out := new(RemoveSharableOrgResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveSharableOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetMultiLevelSharing(ctx context.Context, in *SetMultiLevelSharingReq, opts ...grpc.CallOption) (*SetMultiLevelSharingResp, error) {
	out := new(SetMultiLevelSharingResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetMultiLevelSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetAccountInfo(ctx context.Context, in *SetAccountInfoReq, opts ...grpc.CallOption) (*SetAccountInfoResp, error) {
	out := new(SetAccountInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetBillingDetails(ctx context.Context, in *GetBillingDetailsReq, opts ...grpc.CallOption) (*GetBillingDetailsResp, error) {
	out := new(GetBillingDetailsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetBillingDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetBillingFrequencyList(ctx context.Context, in *GetBillingFrequencyListReq, opts ...grpc.CallOption) (*GetBillingFrequencyListResp, error) {
	out := new(GetBillingFrequencyListResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetBillingFrequencyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetNextBillingFrequency(ctx context.Context, in *SetNextBillingFrequencyReq, opts ...grpc.CallOption) (*SetNextBillingFrequencyResp, error) {
	out := new(SetNextBillingFrequencyResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetNextBillingFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetLargeTraffic(ctx context.Context, in *GetLargeTrafficReq, opts ...grpc.CallOption) (*GetLargeTrafficResp, error) {
	out := new(GetLargeTrafficResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetLargeTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error) {
	out := new(GetAccountInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...grpc.CallOption) (*ChangeUserPasswordResp, error) {
	out := new(ChangeUserPasswordResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error) {
	out := new(SetUserInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListCreditCards(ctx context.Context, in *ListCreditCardsReq, opts ...grpc.CallOption) (*ListCreditCardsResp, error) {
	out := new(ListCreditCardsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListCreditCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*AddPaymentMethodResp, error) {
	out := new(AddPaymentMethodResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/AddPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodReq, opts ...grpc.CallOption) (*SetDefaultPaymentMethodResp, error) {
	out := new(SetDefaultPaymentMethodResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetDefaultPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemovePaymentMethod(ctx context.Context, in *RemovePaymentMethodReq, opts ...grpc.CallOption) (*RemovePaymentMethodResp, error) {
	out := new(RemovePaymentMethodResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemovePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListPayments(ctx context.Context, in *ListPaymentsReq, opts ...grpc.CallOption) (*ListPaymentsResp, error) {
	out := new(ListPaymentsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrongDocServiceServer is the server API for StrongDocService service.
type StrongDocServiceServer interface {
	// Registers a new organization
	//
	// The user who created the organization is automatically an administrator
	//
	// Does not require Login
	RegisterOrganization(context.Context, *RegisterOrganizationReq) (*RegisterOrganizationResp, error)
	// Reactivate an organization that was unsubscribed via aws
	//
	// The user reactivating the organization becomes the administrator
	//
	// Does not require login
	ReactivateOrganization(context.Context, *RegisterOrganizationReq) (*RegisterOrganizationResp, error)
	// Remove an organization and its search indexes
	//
	// Requires Administrator privilege. Only an administrator can remove the whole organization
	//
	// Requires Login
	RemoveOrganization(context.Context, *RemoveOrganizationReq) (*RemoveOrganizationResp, error)
	// InviteUser
	// Requires administrator privilege
	InviteUser(context.Context, *InviteUserReq) (*InviteUserResp, error)
	// ListInvitations
	// Requires administrator privilege
	ListInvitations(context.Context, *ListInvitationsReq) (*ListInvitationsResp, error)
	// ListInvitations
	// Requires administrator privilege
	RevokeInvitation(context.Context, *RevokeInvitationReq) (*RevokeInvitationResp, error)
	// Register new user
	//
	// Creates new user if it doesn't already exist. If the user already exist, and
	// error is thrown
	//
	// Does not require Login
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	// Get user private keys
	//
	// Requires Login
	GetUserPrivateKeys(context.Context, *GetUserPrivateKeysReq) (*GetUserPrivateKeysResp, error)
	// Sets the user's kdf metadata for a new passwordKey
	//
	// Requires Login
	SetUserKdfMetadata(context.Context, *SetUserKdfMetadataReq) (*SetUserKdfMetadataResp, error)
	// Sets the user's authentication metadata
	//
	// Requires Login
	SetUserAuthMetadata(context.Context, *SetUserAuthMetadataReq) (*SetUserAuthMetadataResp, error)
	// List the users of the organization
	//
	// Requires Login
	ListUsers(context.Context, *ListUsersReq) (*ListUsersResp, error)
	// Remove user from organization
	//
	// Removes the user from the organization. The users documents still exists,
	// but belong to the organization, only accessible by organization admin.
	//
	// Requires administrator privilege.
	RemoveUser(context.Context, *RemoveUserReq) (*RemoveUserResp, error)
	// Prepare to promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PreparePromoteUser(context.Context, *PreparePromoteUserReq) (*PreparePromoteUserResp, error)
	// Promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PromoteUser(context.Context, *PromoteUserReq) (*PromoteUserResp, error)
	// Demote administrator to regular user at the organization. Attempting to
	// demote the last administrator of an organization will fail
	//
	// Requires administrator privilege.
	DemoteUser(context.Context, *DemoteUserReq) (*DemoteUserResp, error)
	// List the documents the user can access
	//
	// Administrators can see all documents belonging to the organization
	//
	// Requires Login
	ListDocuments(context.Context, *ListDocumentsReq) (*ListDocumentsResp, error)
	// Remove document the user can access
	//
	// Admin user can remove document for the whole organization
	// Regular user only can remove document for him/herself
	//
	// Requires Login
	RemoveDocument(context.Context, *RemoveDocumentReq) (*RemoveDocumentResp, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocumentStream(StrongDocService_UploadDocumentStreamServer) error
	E2EEUploadDocumentStream(StrongDocService_E2EEUploadDocumentStreamServer) error
	E2EEPrepareDownloadDocument(context.Context, *E2EEPrepareDownloadDocReq) (*E2EEPrepareDownloadDocResp, error)
	E2EEDownloadDocumentStream(*E2EEDownloadDocStreamReq, StrongDocService_E2EEDownloadDocumentStreamServer) error
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocument(context.Context, *UploadDocReq) (*UploadDocResp, error)
	// Download document stream
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocumentStream(*DownloadDocStreamReq, StrongDocService_DownloadDocumentStreamServer) error
	// Download document
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocument(context.Context, *DownloadDocReq) (*DownloadDocResp, error)
	// Encrypt document stream encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocumentStream(StrongDocService_EncryptDocumentStreamServer) error
	// Encrypt document encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocument(context.Context, *EncryptDocReq) (*EncryptDocResp, error)
	// Decrypt document stream decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	//
	// Requires Login
	DecryptDocumentStream(StrongDocService_DecryptDocumentStreamServer) error
	// Decrypt document decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	DecryptDocument(context.Context, *DecryptDocReq) (*DecryptDocResp, error)
	// PrepareShare a document to another user
	//
	// Requires Login
	PrepareShareDocument(context.Context, *PrepareShareDocumentReq) (*PrepareShareDocumentResp, error)
	// Share a document to another user
	//
	// Requires Login
	ShareDocument(context.Context, *ShareDocumentReq) (*ShareDocumentResp, error)
	// Unshare a document that had previously been shared to a user
	//
	// Requires Login
	UnshareDocument(context.Context, *UnshareDocumentReq) (*UnshareDocumentResp, error)
	ListDocActionHistory(context.Context, *ListDocActionHistoryReq) (*ListDocActionHistoryResp, error)
	// Obtain an authentication token to be used with other APIs
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// Obtain the metadata needed to attempt to login with a specified user
	PrepareLogin(context.Context, *PrepareLoginReq) (*PrepareLoginResp, error)
	// Obtain the metadata needed to attempt to authenticate with a specified user
	//
	// Requires Login
	PrepareAuth(context.Context, *PrepareAuthReq) (*PrepareAuthResp, error)
	// The first step in the SRP login proccess
	SrpInit(context.Context, *SrpInitReq) (*SrpInitResp, error)
	// The second and final step in the SRP login proccess
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	SrpProof(context.Context, *SrpProofReq) (*SrpProofResp, error)
	// Logout current user
	//
	// Requires Login
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// Search within a list of user's accessible documents
	//
	// The response will include a list document id and its score when matches are found
	//
	// Requires Login
	Search(context.Context, *SearchReq) (*SearchResp, error)
	//Add a sharable organization to the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	AddSharableOrg(context.Context, *AddSharableOrgReq) (*AddSharableOrgResp, error)
	//Remove a sharable organization from the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	RemoveSharableOrg(context.Context, *RemoveSharableOrgReq) (*RemoveSharableOrgResp, error)
	//Update the organization's multi-level sharing setting
	//
	//Requires Administrator privilege.
	//Requires Login
	SetMultiLevelSharing(context.Context, *SetMultiLevelSharingReq) (*SetMultiLevelSharingResp, error)
	//Update the organization's account info
	//
	//Requires Administrator privilege.
	//Requires Login
	SetAccountInfo(context.Context, *SetAccountInfoReq) (*SetAccountInfoResp, error)
	//List all items of the cost breakdown and also other details such as the billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingDetails(context.Context, *GetBillingDetailsReq) (*GetBillingDetailsResp, error)
	//Obtain the list of billing frequencies (past, current and future)
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingFrequencyList(context.Context, *GetBillingFrequencyListReq) (*GetBillingFrequencyListResp, error)
	//Change the next billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	SetNextBillingFrequency(context.Context, *SetNextBillingFrequencyReq) (*SetNextBillingFrequencyResp, error)
	//Obtain the list of large traffic usages
	//
	//Requires Administrator privilege
	//Requires Login
	GetLargeTraffic(context.Context, *GetLargeTrafficReq) (*GetLargeTrafficResp, error)
	//Obtain information about the account
	//
	//Requires Administrator privilege
	//Requires Login
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error)
	// Obtain information about logged in user
	//
	// Requires Login
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	// Change the password of a logged in user
	//
	// Requires Login
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*ChangeUserPasswordResp, error)
	// Set information about a logged in user
	//
	// Requires Login
	SetUserInfo(context.Context, *SetUserInfoReq) (*SetUserInfoResp, error)
	// Obtain a list of the org's credit cards
	//
	// Requires Administrator privilege
	// Requires Login
	ListCreditCards(context.Context, *ListCreditCardsReq) (*ListCreditCardsResp, error)
	// Add a payment method to the customer and validate the payment method
	//
	// Requires Administrator privilege
	// Requires Login
	AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*AddPaymentMethodResp, error)
	// Set the default payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodReq) (*SetDefaultPaymentMethodResp, error)
	// Remove a payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	RemovePaymentMethod(context.Context, *RemovePaymentMethodReq) (*RemovePaymentMethodResp, error)
	// List payments for the organization
	//
	// Requires Administrator privilege
	// Requires Login
	ListPayments(context.Context, *ListPaymentsReq) (*ListPaymentsResp, error)
}

// UnimplementedStrongDocServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStrongDocServiceServer struct {
}

func (*UnimplementedStrongDocServiceServer) RegisterOrganization(ctx context.Context, req *RegisterOrganizationReq) (*RegisterOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) ReactivateOrganization(ctx context.Context, req *RegisterOrganizationReq) (*RegisterOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveOrganization(ctx context.Context, req *RemoveOrganizationReq) (*RemoveOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) InviteUser(ctx context.Context, req *InviteUserReq) (*InviteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListInvitations(ctx context.Context, req *ListInvitationsReq) (*ListInvitationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (*UnimplementedStrongDocServiceServer) RevokeInvitation(ctx context.Context, req *RevokeInvitationReq) (*RevokeInvitationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvitation not implemented")
}
func (*UnimplementedStrongDocServiceServer) RegisterUser(ctx context.Context, req *RegisterUserReq) (*RegisterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetUserPrivateKeys(ctx context.Context, req *GetUserPrivateKeysReq) (*GetUserPrivateKeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivateKeys not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetUserKdfMetadata(ctx context.Context, req *SetUserKdfMetadataReq) (*SetUserKdfMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserKdfMetadata not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetUserAuthMetadata(ctx context.Context, req *SetUserAuthMetadataReq) (*SetUserAuthMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserAuthMetadata not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListUsers(ctx context.Context, req *ListUsersReq) (*ListUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveUser(ctx context.Context, req *RemoveUserReq) (*RemoveUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) PreparePromoteUser(ctx context.Context, req *PreparePromoteUserReq) (*PreparePromoteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparePromoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) PromoteUser(ctx context.Context, req *PromoteUserReq) (*PromoteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) DemoteUser(ctx context.Context, req *DemoteUserReq) (*DemoteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListDocuments(ctx context.Context, req *ListDocumentsReq) (*ListDocumentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveDocument(ctx context.Context, req *RemoveDocumentReq) (*RemoveDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocumentStream(srv StrongDocService_UploadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) E2EEUploadDocumentStream(srv StrongDocService_E2EEUploadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method E2EEUploadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) E2EEPrepareDownloadDocument(ctx context.Context, req *E2EEPrepareDownloadDocReq) (*E2EEPrepareDownloadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method E2EEPrepareDownloadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) E2EEDownloadDocumentStream(req *E2EEDownloadDocStreamReq, srv StrongDocService_E2EEDownloadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method E2EEDownloadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocument(ctx context.Context, req *UploadDocReq) (*UploadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocumentStream(req *DownloadDocStreamReq, srv StrongDocService_DownloadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocument(ctx context.Context, req *DownloadDocReq) (*DownloadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) EncryptDocumentStream(srv StrongDocService_EncryptDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EncryptDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) EncryptDocument(ctx context.Context, req *EncryptDocReq) (*EncryptDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) DecryptDocumentStream(srv StrongDocService_DecryptDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DecryptDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) DecryptDocument(ctx context.Context, req *DecryptDocReq) (*DecryptDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) PrepareShareDocument(ctx context.Context, req *PrepareShareDocumentReq) (*PrepareShareDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareShareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) ShareDocument(ctx context.Context, req *ShareDocumentReq) (*ShareDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) UnshareDocument(ctx context.Context, req *UnshareDocumentReq) (*UnshareDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListDocActionHistory(ctx context.Context, req *ListDocActionHistoryReq) (*ListDocActionHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocActionHistory not implemented")
}
func (*UnimplementedStrongDocServiceServer) Login(ctx context.Context, req *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedStrongDocServiceServer) PrepareLogin(ctx context.Context, req *PrepareLoginReq) (*PrepareLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareLogin not implemented")
}
func (*UnimplementedStrongDocServiceServer) PrepareAuth(ctx context.Context, req *PrepareAuthReq) (*PrepareAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAuth not implemented")
}
func (*UnimplementedStrongDocServiceServer) SrpInit(ctx context.Context, req *SrpInitReq) (*SrpInitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrpInit not implemented")
}
func (*UnimplementedStrongDocServiceServer) SrpProof(ctx context.Context, req *SrpProofReq) (*SrpProofResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrpProof not implemented")
}
func (*UnimplementedStrongDocServiceServer) Logout(ctx context.Context, req *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedStrongDocServiceServer) Search(ctx context.Context, req *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedStrongDocServiceServer) AddSharableOrg(ctx context.Context, req *AddSharableOrgReq) (*AddSharableOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSharableOrg not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveSharableOrg(ctx context.Context, req *RemoveSharableOrgReq) (*RemoveSharableOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSharableOrg not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetMultiLevelSharing(ctx context.Context, req *SetMultiLevelSharingReq) (*SetMultiLevelSharingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiLevelSharing not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetAccountInfo(ctx context.Context, req *SetAccountInfoReq) (*SetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetBillingDetails(ctx context.Context, req *GetBillingDetailsReq) (*GetBillingDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingDetails not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetBillingFrequencyList(ctx context.Context, req *GetBillingFrequencyListReq) (*GetBillingFrequencyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingFrequencyList not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetNextBillingFrequency(ctx context.Context, req *SetNextBillingFrequencyReq) (*SetNextBillingFrequencyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextBillingFrequency not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetLargeTraffic(ctx context.Context, req *GetLargeTrafficReq) (*GetLargeTrafficResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLargeTraffic not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetAccountInfo(ctx context.Context, req *GetAccountInfoReq) (*GetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetUserInfo(ctx context.Context, req *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) ChangeUserPassword(ctx context.Context, req *ChangeUserPasswordReq) (*ChangeUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetUserInfo(ctx context.Context, req *SetUserInfoReq) (*SetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListCreditCards(ctx context.Context, req *ListCreditCardsReq) (*ListCreditCardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditCards not implemented")
}
func (*UnimplementedStrongDocServiceServer) AddPaymentMethod(ctx context.Context, req *AddPaymentMethodReq) (*AddPaymentMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetDefaultPaymentMethod(ctx context.Context, req *SetDefaultPaymentMethodReq) (*SetDefaultPaymentMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPaymentMethod not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemovePaymentMethod(ctx context.Context, req *RemovePaymentMethodReq) (*RemovePaymentMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePaymentMethod not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListPayments(ctx context.Context, req *ListPaymentsReq) (*ListPaymentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayments not implemented")
}

func RegisterStrongDocServiceServer(s *grpc.Server, srv StrongDocServiceServer) {
	s.RegisterService(&_StrongDocService_serviceDesc, srv)
}

func _StrongDocService_RegisterOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RegisterOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RegisterOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RegisterOrganization(ctx, req.(*RegisterOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ReactivateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ReactivateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ReactivateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ReactivateOrganization(ctx, req.(*RegisterOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveOrganization(ctx, req.(*RemoveOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).InviteUser(ctx, req.(*InviteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListInvitations(ctx, req.(*ListInvitationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInvitationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RevokeInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RevokeInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RevokeInvitation(ctx, req.(*RevokeInvitationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetUserPrivateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPrivateKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetUserPrivateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetUserPrivateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetUserPrivateKeys(ctx, req.(*GetUserPrivateKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetUserKdfMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserKdfMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetUserKdfMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetUserKdfMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetUserKdfMetadata(ctx, req.(*SetUserKdfMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetUserAuthMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAuthMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetUserAuthMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetUserAuthMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetUserAuthMetadata(ctx, req.(*SetUserAuthMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListUsers(ctx, req.(*ListUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveUser(ctx, req.(*RemoveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PreparePromoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparePromoteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PreparePromoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PreparePromoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PreparePromoteUser(ctx, req.(*PreparePromoteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PromoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PromoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PromoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PromoteUser(ctx, req.(*PromoteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DemoteUser(ctx, req.(*DemoteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListDocuments(ctx, req.(*ListDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveDocument(ctx, req.(*RemoveDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UploadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).UploadDocumentStream(&strongDocServiceUploadDocumentStreamServer{stream})
}

type StrongDocService_UploadDocumentStreamServer interface {
	SendAndClose(*UploadDocStreamResp) error
	Recv() (*UploadDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceUploadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceUploadDocumentStreamServer) SendAndClose(m *UploadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceUploadDocumentStreamServer) Recv() (*UploadDocStreamReq, error) {
	m := new(UploadDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_E2EEUploadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).E2EEUploadDocumentStream(&strongDocServiceE2EEUploadDocumentStreamServer{stream})
}

type StrongDocService_E2EEUploadDocumentStreamServer interface {
	Send(*E2EEUploadDocStreamResp) error
	Recv() (*E2EEUploadDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceE2EEUploadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceE2EEUploadDocumentStreamServer) Send(m *E2EEUploadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceE2EEUploadDocumentStreamServer) Recv() (*E2EEUploadDocStreamReq, error) {
	m := new(E2EEUploadDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_E2EEPrepareDownloadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(E2EEPrepareDownloadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).E2EEPrepareDownloadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/E2EEPrepareDownloadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).E2EEPrepareDownloadDocument(ctx, req.(*E2EEPrepareDownloadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_E2EEDownloadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(E2EEDownloadDocStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrongDocServiceServer).E2EEDownloadDocumentStream(m, &strongDocServiceE2EEDownloadDocumentStreamServer{stream})
}

type StrongDocService_E2EEDownloadDocumentStreamServer interface {
	Send(*E2EEDownloadDocStreamResp) error
	grpc.ServerStream
}

type strongDocServiceE2EEDownloadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceE2EEDownloadDocumentStreamServer) Send(m *E2EEDownloadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _StrongDocService_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UploadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UploadDocument(ctx, req.(*UploadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DownloadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDocStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrongDocServiceServer).DownloadDocumentStream(m, &strongDocServiceDownloadDocumentStreamServer{stream})
}

type StrongDocService_DownloadDocumentStreamServer interface {
	Send(*DownloadDocStreamResp) error
	grpc.ServerStream
}

type strongDocServiceDownloadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceDownloadDocumentStreamServer) Send(m *DownloadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _StrongDocService_DownloadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DownloadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DownloadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DownloadDocument(ctx, req.(*DownloadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_EncryptDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).EncryptDocumentStream(&strongDocServiceEncryptDocumentStreamServer{stream})
}

type StrongDocService_EncryptDocumentStreamServer interface {
	Send(*EncryptDocStreamResp) error
	Recv() (*EncryptDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceEncryptDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceEncryptDocumentStreamServer) Send(m *EncryptDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceEncryptDocumentStreamServer) Recv() (*EncryptDocStreamReq, error) {
	m := new(EncryptDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_EncryptDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).EncryptDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/EncryptDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).EncryptDocument(ctx, req.(*EncryptDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DecryptDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).DecryptDocumentStream(&strongDocServiceDecryptDocumentStreamServer{stream})
}

type StrongDocService_DecryptDocumentStreamServer interface {
	Send(*DecryptDocStreamResp) error
	Recv() (*DecryptDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceDecryptDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceDecryptDocumentStreamServer) Send(m *DecryptDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceDecryptDocumentStreamServer) Recv() (*DecryptDocStreamReq, error) {
	m := new(DecryptDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_DecryptDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DecryptDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DecryptDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DecryptDocument(ctx, req.(*DecryptDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PrepareShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareShareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PrepareShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PrepareShareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PrepareShareDocument(ctx, req.(*PrepareShareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ShareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ShareDocument(ctx, req.(*ShareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UnshareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UnshareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UnshareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UnshareDocument(ctx, req.(*UnshareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListDocActionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocActionHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListDocActionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListDocActionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListDocActionHistory(ctx, req.(*ListDocActionHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PrepareLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PrepareLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PrepareLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PrepareLogin(ctx, req.(*PrepareLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PrepareAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PrepareAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PrepareAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PrepareAuth(ctx, req.(*PrepareAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SrpInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrpInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SrpInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SrpInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SrpInit(ctx, req.(*SrpInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SrpProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrpProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SrpProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SrpProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SrpProof(ctx, req.(*SrpProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_AddSharableOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSharableOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).AddSharableOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/AddSharableOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).AddSharableOrg(ctx, req.(*AddSharableOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveSharableOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSharableOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveSharableOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveSharableOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveSharableOrg(ctx, req.(*RemoveSharableOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetMultiLevelSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMultiLevelSharingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetMultiLevelSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetMultiLevelSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetMultiLevelSharing(ctx, req.(*SetMultiLevelSharingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetAccountInfo(ctx, req.(*SetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetBillingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetBillingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetBillingDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetBillingDetails(ctx, req.(*GetBillingDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetBillingFrequencyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingFrequencyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetBillingFrequencyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetBillingFrequencyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetBillingFrequencyList(ctx, req.(*GetBillingFrequencyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetNextBillingFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextBillingFrequencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetNextBillingFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetNextBillingFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetNextBillingFrequency(ctx, req.(*SetNextBillingFrequencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetLargeTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLargeTrafficReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetLargeTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetLargeTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetLargeTraffic(ctx, req.(*GetLargeTrafficReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetUserInfo(ctx, req.(*SetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListCreditCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListCreditCards(ctx, req.(*ListCreditCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).AddPaymentMethod(ctx, req.(*AddPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetDefaultPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetDefaultPaymentMethod(ctx, req.(*SetDefaultPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemovePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemovePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemovePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemovePaymentMethod(ctx, req.(*RemovePaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListPayments(ctx, req.(*ListPaymentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StrongDocService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StrongDocService",
	HandlerType: (*StrongDocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrganization",
			Handler:    _StrongDocService_RegisterOrganization_Handler,
		},
		{
			MethodName: "ReactivateOrganization",
			Handler:    _StrongDocService_ReactivateOrganization_Handler,
		},
		{
			MethodName: "RemoveOrganization",
			Handler:    _StrongDocService_RemoveOrganization_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _StrongDocService_InviteUser_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _StrongDocService_ListInvitations_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			Handler:    _StrongDocService_RevokeInvitation_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _StrongDocService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUserPrivateKeys",
			Handler:    _StrongDocService_GetUserPrivateKeys_Handler,
		},
		{
			MethodName: "SetUserKdfMetadata",
			Handler:    _StrongDocService_SetUserKdfMetadata_Handler,
		},
		{
			MethodName: "SetUserAuthMetadata",
			Handler:    _StrongDocService_SetUserAuthMetadata_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _StrongDocService_ListUsers_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _StrongDocService_RemoveUser_Handler,
		},
		{
			MethodName: "PreparePromoteUser",
			Handler:    _StrongDocService_PreparePromoteUser_Handler,
		},
		{
			MethodName: "PromoteUser",
			Handler:    _StrongDocService_PromoteUser_Handler,
		},
		{
			MethodName: "DemoteUser",
			Handler:    _StrongDocService_DemoteUser_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _StrongDocService_ListDocuments_Handler,
		},
		{
			MethodName: "RemoveDocument",
			Handler:    _StrongDocService_RemoveDocument_Handler,
		},
		{
			MethodName: "E2EEPrepareDownloadDocument",
			Handler:    _StrongDocService_E2EEPrepareDownloadDocument_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _StrongDocService_UploadDocument_Handler,
		},
		{
			MethodName: "DownloadDocument",
			Handler:    _StrongDocService_DownloadDocument_Handler,
		},
		{
			MethodName: "EncryptDocument",
			Handler:    _StrongDocService_EncryptDocument_Handler,
		},
		{
			MethodName: "DecryptDocument",
			Handler:    _StrongDocService_DecryptDocument_Handler,
		},
		{
			MethodName: "PrepareShareDocument",
			Handler:    _StrongDocService_PrepareShareDocument_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _StrongDocService_ShareDocument_Handler,
		},
		{
			MethodName: "UnshareDocument",
			Handler:    _StrongDocService_UnshareDocument_Handler,
		},
		{
			MethodName: "ListDocActionHistory",
			Handler:    _StrongDocService_ListDocActionHistory_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StrongDocService_Login_Handler,
		},
		{
			MethodName: "PrepareLogin",
			Handler:    _StrongDocService_PrepareLogin_Handler,
		},
		{
			MethodName: "PrepareAuth",
			Handler:    _StrongDocService_PrepareAuth_Handler,
		},
		{
			MethodName: "SrpInit",
			Handler:    _StrongDocService_SrpInit_Handler,
		},
		{
			MethodName: "SrpProof",
			Handler:    _StrongDocService_SrpProof_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _StrongDocService_Logout_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _StrongDocService_Search_Handler,
		},
		{
			MethodName: "AddSharableOrg",
			Handler:    _StrongDocService_AddSharableOrg_Handler,
		},
		{
			MethodName: "RemoveSharableOrg",
			Handler:    _StrongDocService_RemoveSharableOrg_Handler,
		},
		{
			MethodName: "SetMultiLevelSharing",
			Handler:    _StrongDocService_SetMultiLevelSharing_Handler,
		},
		{
			MethodName: "SetAccountInfo",
			Handler:    _StrongDocService_SetAccountInfo_Handler,
		},
		{
			MethodName: "GetBillingDetails",
			Handler:    _StrongDocService_GetBillingDetails_Handler,
		},
		{
			MethodName: "GetBillingFrequencyList",
			Handler:    _StrongDocService_GetBillingFrequencyList_Handler,
		},
		{
			MethodName: "SetNextBillingFrequency",
			Handler:    _StrongDocService_SetNextBillingFrequency_Handler,
		},
		{
			MethodName: "GetLargeTraffic",
			Handler:    _StrongDocService_GetLargeTraffic_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _StrongDocService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _StrongDocService_GetUserInfo_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _StrongDocService_ChangeUserPassword_Handler,
		},
		{
			MethodName: "SetUserInfo",
			Handler:    _StrongDocService_SetUserInfo_Handler,
		},
		{
			MethodName: "ListCreditCards",
			Handler:    _StrongDocService_ListCreditCards_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _StrongDocService_AddPaymentMethod_Handler,
		},
		{
			MethodName: "SetDefaultPaymentMethod",
			Handler:    _StrongDocService_SetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "RemovePaymentMethod",
			Handler:    _StrongDocService_RemovePaymentMethod_Handler,
		},
		{
			MethodName: "ListPayments",
			Handler:    _StrongDocService_ListPayments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDocumentStream",
			Handler:       _StrongDocService_UploadDocumentStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "E2EEUploadDocumentStream",
			Handler:       _StrongDocService_E2EEUploadDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "E2EEDownloadDocumentStream",
			Handler:       _StrongDocService_E2EEDownloadDocumentStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadDocumentStream",
			Handler:       _StrongDocService_DownloadDocumentStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EncryptDocumentStream",
			Handler:       _StrongDocService_EncryptDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DecryptDocumentStream",
			Handler:       _StrongDocService_DecryptDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strongdoc.proto",
}
