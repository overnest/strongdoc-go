// Code generated by protoc-gen-go. DO NOT EDIT.
// source: strongdoc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TimeInterval int32

const (
	TimeInterval_UNDEFINED TimeInterval = 0
	TimeInterval_MONTH     TimeInterval = 1
	TimeInterval_YEAR      TimeInterval = 2
)

var TimeInterval_name = map[int32]string{
	0: "UNDEFINED",
	1: "MONTH",
	2: "YEAR",
}

var TimeInterval_value = map[string]int32{
	"UNDEFINED": 0,
	"MONTH":     1,
	"YEAR":      2,
}

func (x TimeInterval) String() string {
	return proto.EnumName(TimeInterval_name, int32(x))
}

func (TimeInterval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{0}
}

type GetBillingDetailsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBillingDetailsRequest) Reset()         { *m = GetBillingDetailsRequest{} }
func (m *GetBillingDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBillingDetailsRequest) ProtoMessage()    {}
func (*GetBillingDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{0}
}

func (m *GetBillingDetailsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBillingDetailsRequest.Unmarshal(m, b)
}
func (m *GetBillingDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBillingDetailsRequest.Marshal(b, m, deterministic)
}
func (m *GetBillingDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBillingDetailsRequest.Merge(m, src)
}
func (m *GetBillingDetailsRequest) XXX_Size() int {
	return xxx_messageInfo_GetBillingDetailsRequest.Size(m)
}
func (m *GetBillingDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBillingDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBillingDetailsRequest proto.InternalMessageInfo

type GetBillingDetailsResponse struct {
	CurrentPeriod        *BillingPeriod `protobuf:"bytes,1,opt,name=currentPeriod,proto3" json:"currentPeriod,omitempty"`
	TotalCost            int32          `protobuf:"varint,2,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	Documents            *Documents     `protobuf:"bytes,3,opt,name=documents,proto3" json:"documents,omitempty"`
	Index                *Index         `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	Traffic              *Traffic       `protobuf:"bytes,5,opt,name=traffic,proto3" json:"traffic,omitempty"`
	NextPeriod           *BillingPeriod `protobuf:"bytes,6,opt,name=nextPeriod,proto3" json:"nextPeriod,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetBillingDetailsResponse) Reset()         { *m = GetBillingDetailsResponse{} }
func (m *GetBillingDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBillingDetailsResponse) ProtoMessage()    {}
func (*GetBillingDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{1}
}

func (m *GetBillingDetailsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBillingDetailsResponse.Unmarshal(m, b)
}
func (m *GetBillingDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBillingDetailsResponse.Marshal(b, m, deterministic)
}
func (m *GetBillingDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBillingDetailsResponse.Merge(m, src)
}
func (m *GetBillingDetailsResponse) XXX_Size() int {
	return xxx_messageInfo_GetBillingDetailsResponse.Size(m)
}
func (m *GetBillingDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBillingDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBillingDetailsResponse proto.InternalMessageInfo

func (m *GetBillingDetailsResponse) GetCurrentPeriod() *BillingPeriod {
	if m != nil {
		return m.CurrentPeriod
	}
	return nil
}

func (m *GetBillingDetailsResponse) GetTotalCost() int32 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

func (m *GetBillingDetailsResponse) GetDocuments() *Documents {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *GetBillingDetailsResponse) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *GetBillingDetailsResponse) GetTraffic() *Traffic {
	if m != nil {
		return m.Traffic
	}
	return nil
}

func (m *GetBillingDetailsResponse) GetNextPeriod() *BillingPeriod {
	if m != nil {
		return m.NextPeriod
	}
	return nil
}

type BillingPeriod struct {
	Frequency            TimeInterval         `protobuf:"varint,1,opt,name=frequency,proto3,enum=proto.TimeInterval" json:"frequency,omitempty"`
	PeriodStart          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=periodStart,proto3" json:"periodStart,omitempty"`
	PeriodEnd            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=periodEnd,proto3" json:"periodEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BillingPeriod) Reset()         { *m = BillingPeriod{} }
func (m *BillingPeriod) String() string { return proto.CompactTextString(m) }
func (*BillingPeriod) ProtoMessage()    {}
func (*BillingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{2}
}

func (m *BillingPeriod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BillingPeriod.Unmarshal(m, b)
}
func (m *BillingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BillingPeriod.Marshal(b, m, deterministic)
}
func (m *BillingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingPeriod.Merge(m, src)
}
func (m *BillingPeriod) XXX_Size() int {
	return xxx_messageInfo_BillingPeriod.Size(m)
}
func (m *BillingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_BillingPeriod proto.InternalMessageInfo

func (m *BillingPeriod) GetFrequency() TimeInterval {
	if m != nil {
		return m.Frequency
	}
	return TimeInterval_UNDEFINED
}

func (m *BillingPeriod) GetPeriodStart() *timestamp.Timestamp {
	if m != nil {
		return m.PeriodStart
	}
	return nil
}

func (m *BillingPeriod) GetPeriodEnd() *timestamp.Timestamp {
	if m != nil {
		return m.PeriodEnd
	}
	return nil
}

type Documents struct {
	Cost                 int32    `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	Size                 float64  `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Documents) Reset()         { *m = Documents{} }
func (m *Documents) String() string { return proto.CompactTextString(m) }
func (*Documents) ProtoMessage()    {}
func (*Documents) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{3}
}

func (m *Documents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Documents.Unmarshal(m, b)
}
func (m *Documents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Documents.Marshal(b, m, deterministic)
}
func (m *Documents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Documents.Merge(m, src)
}
func (m *Documents) XXX_Size() int {
	return xxx_messageInfo_Documents.Size(m)
}
func (m *Documents) XXX_DiscardUnknown() {
	xxx_messageInfo_Documents.DiscardUnknown(m)
}

var xxx_messageInfo_Documents proto.InternalMessageInfo

func (m *Documents) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Documents) GetSize() float64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Index struct {
	Cost                 int32    `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{4}
}

func (m *Index) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Index.Unmarshal(m, b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Index.Marshal(b, m, deterministic)
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return xxx_messageInfo_Index.Size(m)
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

func (m *Index) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Index) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Traffic struct {
	Cost                 int32    `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	Incoming             float64  `protobuf:"fixed64,2,opt,name=incoming,proto3" json:"incoming,omitempty"`
	Outgoing             float64  `protobuf:"fixed64,3,opt,name=outgoing,proto3" json:"outgoing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Traffic) Reset()         { *m = Traffic{} }
func (m *Traffic) String() string { return proto.CompactTextString(m) }
func (*Traffic) ProtoMessage()    {}
func (*Traffic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{5}
}

func (m *Traffic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Traffic.Unmarshal(m, b)
}
func (m *Traffic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Traffic.Marshal(b, m, deterministic)
}
func (m *Traffic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Traffic.Merge(m, src)
}
func (m *Traffic) XXX_Size() int {
	return xxx_messageInfo_Traffic.Size(m)
}
func (m *Traffic) XXX_DiscardUnknown() {
	xxx_messageInfo_Traffic.DiscardUnknown(m)
}

var xxx_messageInfo_Traffic proto.InternalMessageInfo

func (m *Traffic) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Traffic) GetIncoming() float64 {
	if m != nil {
		return m.Incoming
	}
	return 0
}

func (m *Traffic) GetOutgoing() float64 {
	if m != nil {
		return m.Outgoing
	}
	return 0
}

type GetBillingPeriodRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBillingPeriodRequest) Reset()         { *m = GetBillingPeriodRequest{} }
func (m *GetBillingPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*GetBillingPeriodRequest) ProtoMessage()    {}
func (*GetBillingPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{6}
}

func (m *GetBillingPeriodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBillingPeriodRequest.Unmarshal(m, b)
}
func (m *GetBillingPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBillingPeriodRequest.Marshal(b, m, deterministic)
}
func (m *GetBillingPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBillingPeriodRequest.Merge(m, src)
}
func (m *GetBillingPeriodRequest) XXX_Size() int {
	return xxx_messageInfo_GetBillingPeriodRequest.Size(m)
}
func (m *GetBillingPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBillingPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBillingPeriodRequest proto.InternalMessageInfo

type GetBillingPeriodResponse struct {
	CurrentPeriod        *BillingPeriod `protobuf:"bytes,1,opt,name=currentPeriod,proto3" json:"currentPeriod,omitempty"`
	NextPeriod           *BillingPeriod `protobuf:"bytes,2,opt,name=nextPeriod,proto3" json:"nextPeriod,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetBillingPeriodResponse) Reset()         { *m = GetBillingPeriodResponse{} }
func (m *GetBillingPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*GetBillingPeriodResponse) ProtoMessage()    {}
func (*GetBillingPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{7}
}

func (m *GetBillingPeriodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBillingPeriodResponse.Unmarshal(m, b)
}
func (m *GetBillingPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBillingPeriodResponse.Marshal(b, m, deterministic)
}
func (m *GetBillingPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBillingPeriodResponse.Merge(m, src)
}
func (m *GetBillingPeriodResponse) XXX_Size() int {
	return xxx_messageInfo_GetBillingPeriodResponse.Size(m)
}
func (m *GetBillingPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBillingPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBillingPeriodResponse proto.InternalMessageInfo

func (m *GetBillingPeriodResponse) GetCurrentPeriod() *BillingPeriod {
	if m != nil {
		return m.CurrentPeriod
	}
	return nil
}

func (m *GetBillingPeriodResponse) GetNextPeriod() *BillingPeriod {
	if m != nil {
		return m.NextPeriod
	}
	return nil
}

type SetBillingPeriodRequest struct {
	Frequency            TimeInterval `protobuf:"varint,1,opt,name=frequency,proto3,enum=proto.TimeInterval" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetBillingPeriodRequest) Reset()         { *m = SetBillingPeriodRequest{} }
func (m *SetBillingPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*SetBillingPeriodRequest) ProtoMessage()    {}
func (*SetBillingPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{8}
}

func (m *SetBillingPeriodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBillingPeriodRequest.Unmarshal(m, b)
}
func (m *SetBillingPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBillingPeriodRequest.Marshal(b, m, deterministic)
}
func (m *SetBillingPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBillingPeriodRequest.Merge(m, src)
}
func (m *SetBillingPeriodRequest) XXX_Size() int {
	return xxx_messageInfo_SetBillingPeriodRequest.Size(m)
}
func (m *SetBillingPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBillingPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBillingPeriodRequest proto.InternalMessageInfo

func (m *SetBillingPeriodRequest) GetFrequency() TimeInterval {
	if m != nil {
		return m.Frequency
	}
	return TimeInterval_UNDEFINED
}

type SetBillingPeriodResponse struct {
	CurrentPeriod        *BillingPeriod `protobuf:"bytes,1,opt,name=currentPeriod,proto3" json:"currentPeriod,omitempty"`
	NextPeriod           *BillingPeriod `protobuf:"bytes,2,opt,name=nextPeriod,proto3" json:"nextPeriod,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetBillingPeriodResponse) Reset()         { *m = SetBillingPeriodResponse{} }
func (m *SetBillingPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*SetBillingPeriodResponse) ProtoMessage()    {}
func (*SetBillingPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{9}
}

func (m *SetBillingPeriodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBillingPeriodResponse.Unmarshal(m, b)
}
func (m *SetBillingPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBillingPeriodResponse.Marshal(b, m, deterministic)
}
func (m *SetBillingPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBillingPeriodResponse.Merge(m, src)
}
func (m *SetBillingPeriodResponse) XXX_Size() int {
	return xxx_messageInfo_SetBillingPeriodResponse.Size(m)
}
func (m *SetBillingPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBillingPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetBillingPeriodResponse proto.InternalMessageInfo

func (m *SetBillingPeriodResponse) GetCurrentPeriod() *BillingPeriod {
	if m != nil {
		return m.CurrentPeriod
	}
	return nil
}

func (m *SetBillingPeriodResponse) GetNextPeriod() *BillingPeriod {
	if m != nil {
		return m.NextPeriod
	}
	return nil
}

type GetConfigurationReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigurationReq) Reset()         { *m = GetConfigurationReq{} }
func (m *GetConfigurationReq) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationReq) ProtoMessage()    {}
func (*GetConfigurationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{10}
}

func (m *GetConfigurationReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationReq.Unmarshal(m, b)
}
func (m *GetConfigurationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationReq.Marshal(b, m, deterministic)
}
func (m *GetConfigurationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationReq.Merge(m, src)
}
func (m *GetConfigurationReq) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationReq.Size(m)
}
func (m *GetConfigurationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationReq proto.InternalMessageInfo

type GetConfigurationResp struct {
	Configuration        string   `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigurationResp) Reset()         { *m = GetConfigurationResp{} }
func (m *GetConfigurationResp) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationResp) ProtoMessage()    {}
func (*GetConfigurationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{11}
}

func (m *GetConfigurationResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationResp.Unmarshal(m, b)
}
func (m *GetConfigurationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationResp.Marshal(b, m, deterministic)
}
func (m *GetConfigurationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationResp.Merge(m, src)
}
func (m *GetConfigurationResp) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationResp.Size(m)
}
func (m *GetConfigurationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationResp proto.InternalMessageInfo

func (m *GetConfigurationResp) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.TimeInterval", TimeInterval_name, TimeInterval_value)
	proto.RegisterType((*GetBillingDetailsRequest)(nil), "proto.GetBillingDetailsRequest")
	proto.RegisterType((*GetBillingDetailsResponse)(nil), "proto.GetBillingDetailsResponse")
	proto.RegisterType((*BillingPeriod)(nil), "proto.BillingPeriod")
	proto.RegisterType((*Documents)(nil), "proto.Documents")
	proto.RegisterType((*Index)(nil), "proto.Index")
	proto.RegisterType((*Traffic)(nil), "proto.Traffic")
	proto.RegisterType((*GetBillingPeriodRequest)(nil), "proto.GetBillingPeriodRequest")
	proto.RegisterType((*GetBillingPeriodResponse)(nil), "proto.GetBillingPeriodResponse")
	proto.RegisterType((*SetBillingPeriodRequest)(nil), "proto.SetBillingPeriodRequest")
	proto.RegisterType((*SetBillingPeriodResponse)(nil), "proto.SetBillingPeriodResponse")
	proto.RegisterType((*GetConfigurationReq)(nil), "proto.GetConfigurationReq")
	proto.RegisterType((*GetConfigurationResp)(nil), "proto.GetConfigurationResp")
}

func init() { proto.RegisterFile("strongdoc.proto", fileDescriptor_d003557e9d9c9339) }

var fileDescriptor_d003557e9d9c9339 = []byte{
	// 1791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0x1b, 0xc7,
	0xf5, 0xf7, 0xd2, 0x96, 0x63, 0x1e, 0x4b, 0x14, 0x3d, 0x22, 0x25, 0x6a, 0x25, 0x47, 0x9b, 0xfd,
	0xff, 0x53, 0x0b, 0xae, 0xc5, 0xb5, 0xe9, 0xb4, 0x09, 0x84, 0x14, 0x88, 0x6c, 0x2a, 0xaa, 0x50,
	0xd9, 0x51, 0x49, 0x2b, 0x45, 0x7b, 0xd1, 0x62, 0xb5, 0x1c, 0xad, 0x36, 0x59, 0xee, 0xac, 0x66,
	0x87, 0xb2, 0x69, 0xd7, 0x17, 0x09, 0x0a, 0x34, 0x2d, 0x02, 0x14, 0x48, 0xd1, 0xdb, 0x02, 0xbd,
	0xec, 0x03, 0xf4, 0xa6, 0xaf, 0xd1, 0x57, 0xe8, 0x55, 0xd1, 0x87, 0x28, 0x66, 0x76, 0x66, 0xbf,
	0xb8, 0xcb, 0xb8, 0x45, 0x2f, 0x7a, 0x45, 0xce, 0xf9, 0x9d, 0x8f, 0xdf, 0x39, 0x67, 0x76, 0x66,
	0xcf, 0xc2, 0x72, 0xc4, 0x28, 0x09, 0xdc, 0x11, 0x71, 0xba, 0x21, 0x25, 0x8c, 0xa0, 0x05, 0xf1,
	0xa3, 0x6f, 0xba, 0x84, 0xb8, 0x3e, 0xb6, 0xec, 0xd0, 0xb3, 0xec, 0x20, 0x20, 0xcc, 0x66, 0x1e,
	0x09, 0xa2, 0x58, 0x49, 0xbf, 0x27, 0x7e, 0x9c, 0x1d, 0x17, 0x07, 0x3b, 0xd1, 0x73, 0xdb, 0x75,
	0x31, 0xb5, 0x48, 0x28, 0x34, 0x4a, 0xb4, 0x1b, 0x23, 0xe2, 0x4c, 0xc6, 0x38, 0x60, 0x72, 0xdd,
	0x56, 0xeb, 0xa7, 0x64, 0xc8, 0x08, 0xc5, 0x52, 0xbc, 0x18, 0x61, 0x9b, 0x3a, 0xe7, 0xca, 0xc8,
	0x76, 0x1c, 0x32, 0x09, 0x98, 0x72, 0xb2, 0x25, 0x09, 0x89, 0xd5, 0xe9, 0xe4, 0xcc, 0x62, 0xde,
	0x18, 0x47, 0xcc, 0x1e, 0x87, 0xb1, 0x82, 0xa9, 0x43, 0xe7, 0x00, 0xb3, 0x47, 0x9e, 0xef, 0x7b,
	0x81, 0xdb, 0xc7, 0xcc, 0xf6, 0xfc, 0x68, 0x80, 0x2f, 0x26, 0x38, 0x62, 0xe6, 0x9f, 0x6b, 0xb0,
	0x5e, 0x02, 0x46, 0x21, 0x09, 0x22, 0x8c, 0x76, 0x61, 0xc9, 0x99, 0x50, 0x8a, 0x03, 0x76, 0x8c,
	0xa9, 0x47, 0x46, 0x1d, 0xcd, 0xd0, 0xb6, 0x6f, 0xf6, 0x5a, 0xb1, 0xe3, 0xae, 0xb4, 0x8a, 0xb1,
	0x41, 0x5e, 0x15, 0x6d, 0x42, 0x9d, 0x11, 0x66, 0xfb, 0x8f, 0x49, 0xc4, 0x3a, 0x35, 0x43, 0xdb,
	0x5e, 0x18, 0xa4, 0x02, 0xd4, 0x85, 0xba, 0xca, 0x35, 0xea, 0x5c, 0x15, 0x5e, 0x9b, 0xd2, 0x6b,
	0x5f, 0xc9, 0x07, 0xa9, 0x0a, 0x32, 0x61, 0xc1, 0x0b, 0x46, 0xf8, 0x45, 0xe7, 0x9a, 0xd0, 0x5d,
	0x94, 0xba, 0x87, 0x5c, 0x36, 0x88, 0x21, 0xb4, 0x0d, 0x6f, 0x31, 0x6a, 0x9f, 0x9d, 0x79, 0x4e,
	0x67, 0x41, 0x68, 0x35, 0xa4, 0xd6, 0xb3, 0x58, 0x3a, 0x50, 0x30, 0x7a, 0x0f, 0x20, 0xc0, 0x2f,
	0x54, 0x52, 0xd7, 0xe7, 0x24, 0x95, 0xd1, 0x33, 0xff, 0xaa, 0xc1, 0x52, 0x0e, 0x45, 0x0f, 0xa0,
	0x7e, 0x46, 0x79, 0x25, 0x03, 0x67, 0x2a, 0x6a, 0xd3, 0xe8, 0xad, 0xa8, 0x98, 0xde, 0x18, 0x1f,
	0x06, 0x0c, 0xd3, 0x4b, 0xdb, 0x1f, 0xa4, 0x5a, 0xe8, 0x43, 0xb8, 0x19, 0x0a, 0xe3, 0x21, 0xb3,
	0x69, 0x5c, 0x98, 0x9b, 0x3d, 0xbd, 0x1b, 0xf7, 0xb0, 0xab, 0x7a, 0x28, 0xcc, 0x45, 0x0f, 0x07,
	0x59, 0x75, 0xf4, 0x01, 0xd4, 0xe3, 0xe5, 0x7e, 0x30, 0x92, 0x65, 0x9b, 0x67, 0x9b, 0x2a, 0x9b,
	0x0f, 0xa1, 0x9e, 0x14, 0x16, 0x21, 0xb8, 0xe6, 0xf0, 0xb6, 0x68, 0xa2, 0x2d, 0xe2, 0x3f, 0x97,
	0x45, 0xde, 0x4b, 0x2c, 0x18, 0x69, 0x03, 0xf1, 0xdf, 0xb4, 0x60, 0x41, 0x54, 0xf8, 0x5b, 0x0d,
	0xae, 0x4a, 0x83, 0x13, 0x78, 0x4b, 0x16, 0xbb, 0xd4, 0x44, 0x87, 0x1b, 0x5e, 0xe0, 0x90, 0xb1,
	0x17, 0xb8, 0x32, 0x4e, 0xb2, 0xe6, 0x18, 0x99, 0x30, 0x97, 0x70, 0xec, 0x6a, 0x8c, 0xa9, 0xb5,
	0xb9, 0x0e, 0x6b, 0xe9, 0x26, 0x95, 0x9d, 0x91, 0x1b, 0xf8, 0x6b, 0x2d, 0xbb, 0xbb, 0x15, 0xf6,
	0x5f, 0xd8, 0xbf, 0xf9, 0x3d, 0x52, 0x7b, 0xc3, 0x3d, 0x72, 0x04, 0x6b, 0xc3, 0x72, 0xa6, 0xff,
	0xc1, 0x66, 0x11, 0xc9, 0x0d, 0xff, 0x77, 0x92, 0x6b, 0xc3, 0xca, 0x01, 0x66, 0x8f, 0x49, 0x70,
	0xe6, 0xb9, 0x13, 0x2a, 0x4e, 0xb2, 0x01, 0xbe, 0x30, 0x3f, 0x84, 0xd6, 0xac, 0x38, 0x0a, 0xd1,
	0xff, 0xc3, 0x92, 0x93, 0x15, 0x0a, 0x82, 0xf5, 0x41, 0x5e, 0x78, 0xb7, 0x07, 0x8b, 0xd9, 0xf4,
	0xd1, 0x12, 0xd4, 0x4f, 0x9e, 0xf6, 0xf7, 0x3f, 0x3e, 0x7c, 0xba, 0xdf, 0x6f, 0x5e, 0x41, 0x75,
	0x58, 0x78, 0xf2, 0xc9, 0xd3, 0x67, 0x3f, 0x6c, 0x6a, 0xe8, 0x06, 0x5c, 0xfb, 0xe9, 0xfe, 0xde,
	0xa0, 0x59, 0xeb, 0xfd, 0xe3, 0x36, 0x34, 0x87, 0xe2, 0x78, 0xee, 0x13, 0x67, 0x88, 0xe9, 0xa5,
	0xe7, 0x60, 0xf4, 0xb5, 0x06, 0xad, 0x01, 0x76, 0xbd, 0x88, 0x61, 0xfa, 0x09, 0x75, 0xed, 0xc0,
	0x7b, 0x29, 0x22, 0x20, 0x53, 0x26, 0x56, 0x06, 0xca, 0xe6, 0xe8, 0xff, 0x37, 0x57, 0x27, 0xae,
	0xb8, 0xf9, 0xdd, 0x2f, 0xff, 0xf6, 0xf7, 0xdf, 0xd7, 0xde, 0x35, 0x0d, 0xeb, 0xf2, 0x81, 0x25,
	0x4f, 0x61, 0x8b, 0x96, 0x58, 0xec, 0x6a, 0x77, 0xd1, 0x1f, 0x35, 0x40, 0x03, 0x3c, 0x26, 0x97,
	0x38, 0x47, 0xc6, 0x48, 0x02, 0x15, 0x21, 0x45, 0xe5, 0x9d, 0x39, 0x1a, 0x92, 0xc8, 0xe3, 0x6f,
	0xf6, 0xd0, 0x69, 0x13, 0x1a, 0x00, 0x7b, 0xa1, 0xf7, 0x23, 0x3c, 0xdd, 0x9b, 0xb0, 0x73, 0x74,
	0x45, 0xb0, 0xdb, 0xbe, 0xfb, 0x9d, 0x3c, 0xbb, 0xa2, 0x13, 0xeb, 0xd5, 0x19, 0xa1, 0x0e, 0x7e,
	0x8d, 0xbe, 0xd0, 0x60, 0x51, 0xa5, 0x7b, 0x12, 0x61, 0x8a, 0xf4, 0x42, 0x0d, 0xb8, 0x50, 0x91,
	0xda, 0x28, 0xc5, 0x24, 0x9d, 0x0f, 0xaa, 0xe9, 0xdc, 0x36, 0x3b, 0x65, 0xc5, 0xe2, 0xe6, 0xbc,
	0x48, 0x14, 0xea, 0x47, 0x5e, 0xc4, 0xf8, 0x32, 0x42, 0x6b, 0x32, 0x46, 0x22, 0x51, 0xc1, 0x3b,
	0xb3, 0x80, 0x8c, 0xdc, 0xab, 0x8e, 0xbc, 0x86, 0xda, 0xd9, 0xc8, 0x7e, 0x12, 0x66, 0x0a, 0x10,
	0x97, 0x56, 0x24, 0xdd, 0xc9, 0x55, 0x3b, 0x9b, 0xf2, 0x7a, 0x09, 0x22, 0xc3, 0x7e, 0xbf, 0x3a,
	0xec, 0x86, 0xb9, 0x3a, 0x5b, 0x7f, 0x95, 0xee, 0x6b, 0xb8, 0x79, 0x4c, 0xc9, 0x98, 0xb0, 0x38,
	0xb6, 0x8a, 0x90, 0x91, 0xa9, 0xe0, 0x7a, 0x19, 0x24, 0xa3, 0xbf, 0x5f, 0x1d, 0x7d, 0xd3, 0x5c,
	0xcb, 0x46, 0x0f, 0x53, 0x6b, 0x1e, 0x7e, 0x0a, 0xd0, 0xc7, 0x49, 0x74, 0x95, 0x79, 0x2a, 0x2a,
	0x66, 0x9e, 0x45, 0xfe, 0xed, 0xcc, 0x47, 0x38, 0x1f, 0x7a, 0x89, 0x77, 0x2f, 0xbd, 0x82, 0x36,
	0x32, 0x3d, 0x4d, 0x6f, 0x7c, 0x49, 0x60, 0xb3, 0x1c, 0x94, 0x1c, 0x76, 0xaa, 0x39, 0x20, 0xd4,
	0xe4, 0x1c, 0x46, 0xc4, 0x11, 0x0d, 0xef, 0x13, 0x27, 0x42, 0x5f, 0x6a, 0xd0, 0x88, 0x7b, 0xa8,
	0x5c, 0xa1, 0xcd, 0x5c, 0x6b, 0x95, 0x58, 0x45, 0xbf, 0x5d, 0x81, 0xca, 0xf0, 0x0f, 0xab, 0xc3,
	0x77, 0xee, 0xae, 0xaa, 0xf0, 0x71, 0xe3, 0xad, 0x57, 0x23, 0xe2, 0x1c, 0xf6, 0x5f, 0xa3, 0x1f,
	0x43, 0xeb, 0x24, 0xf4, 0x89, 0x3d, 0x52, 0xee, 0x86, 0x8c, 0x62, 0x7b, 0x9c, 0x6c, 0x81, 0x04,
	0x8c, 0xe5, 0x03, 0x7c, 0x91, 0x6c, 0x81, 0x19, 0x28, 0x0a, 0xcd, 0x2b, 0xdb, 0x1a, 0xfa, 0x1c,
	0x1a, 0x79, 0x97, 0x68, 0xa5, 0x68, 0xc1, 0xdd, 0xb4, 0x66, 0x85, 0x51, 0x68, 0x76, 0xab, 0x93,
	0x58, 0x31, 0x1b, 0x2a, 0x89, 0x89, 0xb0, 0xe1, 0xfd, 0xfb, 0x09, 0xac, 0xf6, 0xc9, 0xf3, 0xa0,
	0x24, 0x83, 0x8d, 0xe4, 0xb5, 0x2d, 0x81, 0xd3, 0x1c, 0x36, 0xab, 0x41, 0x9e, 0xc5, 0x7d, 0x0d,
	0xbd, 0x80, 0x66, 0xd1, 0x31, 0x6a, 0xcf, 0x5a, 0x71, 0x67, 0xab, 0x65, 0xe2, 0x28, 0x34, 0xbf,
	0x57, 0x9d, 0x8b, 0x8e, 0x3a, 0x2a, 0x97, 0x91, 0xb4, 0x4a, 0x5a, 0xf2, 0x29, 0xb4, 0xf7, 0x03,
	0x87, 0x4e, 0x43, 0x56, 0xc8, 0x48, 0x15, 0x3e, 0x45, 0xd3, 0x84, 0x36, 0x2a, 0xb1, 0xb8, 0x2b,
	0xf7, 0x35, 0x44, 0x60, 0xb9, 0xe0, 0x17, 0xb5, 0x66, 0xac, 0xb8, 0xaf, 0x76, 0x89, 0x34, 0x0a,
	0x4d, 0xab, 0x3a, 0x9d, 0x96, 0xb9, 0xac, 0xd2, 0xc1, 0xb1, 0x11, 0xef, 0xcd, 0xa7, 0xd0, 0xee,
	0xe3, 0x79, 0x89, 0xa4, 0xe8, 0x6c, 0x22, 0xb3, 0x58, 0x92, 0x08, 0x83, 0xe5, 0x82, 0xdf, 0x24,
	0x91, 0x54, 0x9e, 0x4d, 0x24, 0x2b, 0x8d, 0x42, 0xf3, 0xbd, 0xea, 0x44, 0xd6, 0xd1, 0x5a, 0xd2,
	0x97, 0xd8, 0x28, 0x69, 0xcb, 0x2f, 0x61, 0x69, 0x78, 0x6e, 0xd3, 0xf4, 0x61, 0x55, 0x4c, 0x73,
	0xd2, 0xe2, 0x49, 0x51, 0x00, 0xe5, 0xa3, 0x7a, 0xbf, 0x9a, 0x41, 0xdb, 0x4c, 0x4e, 0x8a, 0x48,
	0xda, 0xf2, 0x5a, 0xfe, 0x4a, 0x83, 0xe5, 0x93, 0x20, 0xca, 0x11, 0x50, 0xe7, 0x41, 0x41, 0xae,
	0x28, 0xbc, 0x5d, 0x05, 0xbf, 0xc1, 0x1d, 0x65, 0xa2, 0xe4, 0x51, 0x0b, 0xb2, 0x34, 0xbe, 0xd0,
	0xa0, 0x79, 0x80, 0xd3, 0xb3, 0x6f, 0xe8, 0xbd, 0xc4, 0x48, 0x05, 0x2a, 0x02, 0x8a, 0xc8, 0x56,
	0x25, 0x2e, 0x99, 0xdc, 0xab, 0x66, 0x72, 0x0b, 0x25, 0x3b, 0xcb, 0xc5, 0x4c, 0x84, 0x7b, 0x02,
	0x0b, 0x47, 0xc4, 0xf5, 0x82, 0xe4, 0x58, 0x11, 0x2b, 0x15, 0xac, 0x95, 0x17, 0xca, 0x08, 0xeb,
	0xd9, 0x13, 0xc4, 0x9e, 0xb0, 0x73, 0xcb, 0xe7, 0x38, 0x4f, 0xe9, 0xe7, 0x70, 0xfd, 0x88, 0xb8,
	0x64, 0x92, 0x6e, 0xa2, 0x78, 0xa9, 0x1c, 0xb6, 0x0b, 0x52, 0xe9, 0xf1, 0x4e, 0x35, 0xe7, 0x45,
	0x13, 0x78, 0x18, 0x3f, 0xf6, 0xfa, 0x19, 0x5c, 0x1f, 0x8a, 0x31, 0x39, 0xf1, 0x1f, 0x2f, 0x8b,
	0xfe, 0x95, 0xf4, 0x0d, 0x4e, 0x73, 0x94, 0x9c, 0xe6, 0xf1, 0x00, 0x6e, 0xbd, 0xba, 0x98, 0x60,
	0x3a, 0x7d, 0x8d, 0x5e, 0xc2, 0xe2, 0x01, 0x66, 0x62, 0x34, 0x12, 0xa5, 0xd2, 0xd3, 0xca, 0x27,
	0xc2, 0xe2, 0x9b, 0x53, 0x1e, 0x93, 0xd1, 0x1f, 0x54, 0x47, 0x5f, 0x45, 0xad, 0x4c, 0x47, 0xd2,
	0x58, 0xbf, 0xd1, 0xa0, 0xb1, 0x37, 0x1a, 0xf1, 0x0d, 0x6f, 0x9f, 0xfa, 0xfc, 0xd5, 0x2e, 0xb9,
	0xce, 0xf2, 0xe2, 0xe2, 0x75, 0x56, 0x44, 0x25, 0x85, 0xdd, 0x6a, 0x0a, 0x5b, 0x3d, 0x3d, 0x7b,
	0xa3, 0xdb, 0x39, 0x07, 0xbc, 0xa7, 0x7f, 0xd0, 0xe0, 0x56, 0x7c, 0x4b, 0x66, 0xe9, 0x6c, 0xe5,
	0xee, 0xcf, 0x12, 0x46, 0x46, 0xb5, 0x82, 0x24, 0xf5, 0x83, 0x6a, 0x52, 0x66, 0xef, 0xf6, 0xec,
	0x0b, 0x56, 0x81, 0xd7, 0x9f, 0x34, 0x68, 0x0d, 0x31, 0x7b, 0x32, 0xf1, 0x99, 0x77, 0x84, 0x2f,
	0xb1, 0xcf, 0x71, 0x3e, 0x64, 0x9a, 0xc9, 0x26, 0x98, 0x05, 0x8b, 0xa3, 0x40, 0xb9, 0x8e, 0x24,
	0xf8, 0x51, 0x35, 0xc1, 0x77, 0xf5, 0xdc, 0x7c, 0x10, 0x95, 0xb8, 0xe1, 0x1c, 0xbf, 0xd2, 0xe0,
	0xd6, 0xcc, 0x97, 0x17, 0x94, 0x79, 0x86, 0x4b, 0x3f, 0xd8, 0x24, 0xb5, 0xab, 0xfc, 0x68, 0x33,
	0xf7, 0xd0, 0x43, 0x2b, 0x59, 0x6a, 0xa7, 0xb1, 0x03, 0x3e, 0x39, 0x35, 0x8b, 0x33, 0x74, 0xf6,
	0xb4, 0x29, 0x1b, 0x67, 0xf5, 0xad, 0x4a, 0xfc, 0x0d, 0x5e, 0x53, 0x91, 0x5e, 0xc2, 0xc3, 0x8a,
	0xbf, 0x56, 0xa0, 0xdf, 0x69, 0xd0, 0x1c, 0x56, 0xd1, 0x19, 0x7e, 0x0b, 0x9d, 0xaa, 0x71, 0x79,
	0xee, 0x3e, 0xd7, 0xe7, 0xd0, 0xe1, 0xbd, 0x7a, 0x25, 0xea, 0x93, 0x9b, 0x70, 0xb3, 0xcf, 0x7c,
	0x71, 0x22, 0xce, 0x3e, 0xf3, 0x33, 0x63, 0xf1, 0xdc, 0x57, 0x2f, 0x74, 0x8b, 0x13, 0xc9, 0x0d,
	0xc8, 0x8f, 0xfe, 0x59, 0xfb, 0x66, 0xef, 0x2f, 0x35, 0xf4, 0x3e, 0x2c, 0x25, 0x23, 0xaf, 0xb1,
	0x77, 0x7c, 0x68, 0xbe, 0x03, 0x10, 0x0b, 0x86, 0xb6, 0xcf, 0xf4, 0x15, 0x2f, 0x38, 0x23, 0x1f,
	0xc5, 0xdf, 0x2c, 0x23, 0xdb, 0x67, 0x5d, 0x87, 0x8c, 0x7b, 0x57, 0x1f, 0x74, 0xef, 0xf7, 0x9a,
	0x76, 0x18, 0xfa, 0x9e, 0x13, 0x0f, 0x7f, 0x9f, 0x45, 0x24, 0xd8, 0x9d, 0x91, 0xfc, 0xec, 0xb7,
	0x1a, 0xfc, 0x5a, 0xcb, 0x11, 0x9a, 0xde, 0xa8, 0xa1, 0xd1, 0xb3, 0x73, 0x6c, 0x3c, 0x27, 0x74,
	0x64, 0xdc, 0x79, 0x84, 0x6d, 0x8a, 0xe9, 0x1d, 0xc3, 0x0e, 0x46, 0x86, 0x6d, 0x44, 0xa1, 0xed,
	0x60, 0xc3, 0x8b, 0x0c, 0x8a, 0x2f, 0x26, 0x1e, 0xc5, 0x23, 0xe3, 0x14, 0x9f, 0x11, 0x8a, 0x0d,
	0x76, 0x8e, 0x0d, 0x46, 0x3e, 0xc7, 0x41, 0x17, 0x3e, 0x26, 0xd4, 0xc0, 0x2f, 0xec, 0x71, 0xe8,
	0xe3, 0x7b, 0x10, 0x9b, 0x1b, 0xfc, 0x46, 0xc0, 0x01, 0x93, 0xa1, 0x7f, 0x21, 0x34, 0xf5, 0x25,
	0x1e, 0x8f, 0x50, 0x39, 0x9e, 0x1a, 0x35, 0x7a, 0x08, 0x6b, 0x4f, 0xb8, 0x33, 0xfb, 0x94, 0x4c,
	0x98, 0xe1, 0x0e, 0x8e, 0x1f, 0xef, 0x1c, 0xd8, 0x0c, 0x3f, 0xb7, 0xa7, 0xa8, 0x7b, 0xce, 0x58,
	0x18, 0xed, 0x5a, 0x96, 0xeb, 0xb1, 0xf3, 0xc9, 0x29, 0x4f, 0xd2, 0x72, 0x69, 0xe8, 0xec, 0x60,
	0x87, 0x44, 0xd3, 0x88, 0x61, 0xb9, 0x74, 0x63, 0x7d, 0x78, 0xdb, 0x21, 0xe3, 0x6e, 0xa6, 0x28,
	0x85, 0x6f, 0xba, 0x8f, 0x1a, 0x49, 0x49, 0x8f, 0xf9, 0xfa, 0x2b, 0x4d, 0x3b, 0xbd, 0x2e, 0x90,
	0x87, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x22, 0x7e, 0x59, 0x81, 0x00, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StrongDocServiceClient is the client API for StrongDocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StrongDocServiceClient interface {
	// Registers a new organization
	//
	// The user who created the organization is automatically an administrator
	//
	// Does not require Login
	RegisterOrganization(ctx context.Context, in *RegisterOrganizationRequest, opts ...grpc.CallOption) (*RegisterOrganizationResponse, error)
	// Remove an organization and its search indexes
	//
	// Requires Administrator privilege. Only an administrator can remove the whole organization
	//
	// Requires Login
	RemoveOrganization(ctx context.Context, in *RemoveOrganizationRequest, opts ...grpc.CallOption) (*RemoveOrganizationResponse, error)
	// Register new user
	//
	// Creates new user if it doesn't already exist. If the user already exist, and
	// error is thrown
	//
	// Requires administrator privilege
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// List the users of the organization
	//
	// Requires Login
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Remove user from organization
	//
	// Removes the user from the organization. The users documents still exists,
	// but belong to the organization, only accessible by organization admin.
	//
	// Requires administrator privilege.
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	// Promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PromoteUser(ctx context.Context, in *PromoteUserRequest, opts ...grpc.CallOption) (*PromoteUserResponse, error)
	// Demote administrator to regular user at the organization. Attempting to
	// demote the last administrator of an organization will fail
	//
	// Requires administrator privilege.
	DemoteUser(ctx context.Context, in *DemoteUserRequest, opts ...grpc.CallOption) (*DemoteUserResponse, error)
	// List the documents the user can access
	//
	// Administrators can see all documents belonging to the organization
	//
	// Requires Login
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	// Remove document the user can access
	//
	// Admin user can remove document for the whole organization
	// Regular user only can remove document for him/herself
	//
	// Requires Login
	RemoveDocument(ctx context.Context, in *RemoveDocumentRequest, opts ...grpc.CallOption) (*RemoveDocumentResponse, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_UploadDocumentStreamClient, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocument(ctx context.Context, in *UploadDocReq, opts ...grpc.CallOption) (*UploadDocResp, error)
	// Download document stream
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocumentStream(ctx context.Context, in *DownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_DownloadDocumentStreamClient, error)
	// Download document
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocument(ctx context.Context, in *DownloadDocReq, opts ...grpc.CallOption) (*DownloadDocResp, error)
	// Encrypt document stream encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_EncryptDocumentStreamClient, error)
	// Encrypt document encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocument(ctx context.Context, in *EncryptDocReq, opts ...grpc.CallOption) (*EncryptDocResp, error)
	// Decrypt document stream decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	//
	// Requires Login
	DecryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_DecryptDocumentStreamClient, error)
	// Decrypt document decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	DecryptDocument(ctx context.Context, in *DecryptDocReq, opts ...grpc.CallOption) (*DecryptDocResp, error)
	// Share a document to another user
	//
	// Requires Login
	ShareDocument(ctx context.Context, in *ShareDocumentRequest, opts ...grpc.CallOption) (*ShareDocumentResponse, error)
	// Unshare a document that had previously been shared to a user
	//
	// Requires Login
	UnshareDocument(ctx context.Context, in *UnshareDocumentRequest, opts ...grpc.CallOption) (*UnshareDocumentResponse, error)
	// Obtain the size of the user's stored documents
	//
	// Admin user can see the size of the documents which belong to the company
	//
	// Requires Login
	GetDocumentsSize(ctx context.Context, in *GetDocumentsSizeRequest, opts ...grpc.CallOption) (*GetDocumentsSizeResponse, error)
	// Obtain an authentication token to be used with other APIs
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Logout current user
	//
	// Requires Login
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// Search within a list of user's accessible documents
	//
	// The response will include a list document id and its score when matches are found
	//
	// Requires Login
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Obtain size of the organization's indexes
	//
	// Requires Login
	GetIndexSize(ctx context.Context, in *GetIndexSizeRequest, opts ...grpc.CallOption) (*GetIndexSizeResponse, error)
	//Add a sharable organization to the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	AddSharableOrg(ctx context.Context, in *AddSharableOrgRequest, opts ...grpc.CallOption) (*AddSharableOrgResponse, error)
	//Remove a sharable organization from the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	RemoveSharableOrg(ctx context.Context, in *RemoveSharableOrgRequest, opts ...grpc.CallOption) (*RemoveSharableOrgResponse, error)
	//Update the organization's multi-level sharing setting
	//
	//Requires Administrator privilege.
	//Requires Login
	SetMultiLevelSharing(ctx context.Context, in *SetMultiLevelSharingRequest, opts ...grpc.CallOption) (*SetMultiLevelSharingResponse, error)
	//List all items of the cost breakdown and also other details such as the billing period
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingDetails(ctx context.Context, in *GetBillingDetailsRequest, opts ...grpc.CallOption) (*GetBillingDetailsResponse, error)
	//Obtain the billing period
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingPeriod(ctx context.Context, in *GetBillingPeriodRequest, opts ...grpc.CallOption) (*GetBillingPeriodResponse, error)
	//Change the billing period
	//
	//Requires Administrator privilege
	//Requires Login
	SetBillingPeriod(ctx context.Context, in *SetBillingPeriodRequest, opts ...grpc.CallOption) (*SetBillingPeriodResponse, error)
	//Show current server configuration
	//
	//Requires Administrator privilege. Only an administrator can see server configuration
	//Requires Login
	GetConfiguration(ctx context.Context, in *GetConfigurationReq, opts ...grpc.CallOption) (*GetConfigurationResp, error)
}

type strongDocServiceClient struct {
	cc *grpc.ClientConn
}

func NewStrongDocServiceClient(cc *grpc.ClientConn) StrongDocServiceClient {
	return &strongDocServiceClient{cc}
}

func (c *strongDocServiceClient) RegisterOrganization(ctx context.Context, in *RegisterOrganizationRequest, opts ...grpc.CallOption) (*RegisterOrganizationResponse, error) {
	out := new(RegisterOrganizationResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RegisterOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveOrganization(ctx context.Context, in *RemoveOrganizationRequest, opts ...grpc.CallOption) (*RemoveOrganizationResponse, error) {
	out := new(RemoveOrganizationResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PromoteUser(ctx context.Context, in *PromoteUserRequest, opts ...grpc.CallOption) (*PromoteUserResponse, error) {
	out := new(PromoteUserResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PromoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DemoteUser(ctx context.Context, in *DemoteUserRequest, opts ...grpc.CallOption) (*DemoteUserResponse, error) {
	out := new(DemoteUserResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveDocument(ctx context.Context, in *RemoveDocumentRequest, opts ...grpc.CallOption) (*RemoveDocumentResponse, error) {
	out := new(RemoveDocumentResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_UploadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[0], "/proto.StrongDocService/UploadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceUploadDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_UploadDocumentStreamClient interface {
	Send(*UploadDocStreamReq) error
	CloseAndRecv() (*UploadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceUploadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceUploadDocumentStreamClient) Send(m *UploadDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceUploadDocumentStreamClient) CloseAndRecv() (*UploadDocStreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) UploadDocument(ctx context.Context, in *UploadDocReq, opts ...grpc.CallOption) (*UploadDocResp, error) {
	out := new(UploadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UploadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DownloadDocumentStream(ctx context.Context, in *DownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_DownloadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[1], "/proto.StrongDocService/DownloadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceDownloadDocumentStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StrongDocService_DownloadDocumentStreamClient interface {
	Recv() (*DownloadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceDownloadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceDownloadDocumentStreamClient) Recv() (*DownloadDocStreamResp, error) {
	m := new(DownloadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) DownloadDocument(ctx context.Context, in *DownloadDocReq, opts ...grpc.CallOption) (*DownloadDocResp, error) {
	out := new(DownloadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DownloadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) EncryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_EncryptDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[2], "/proto.StrongDocService/EncryptDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceEncryptDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_EncryptDocumentStreamClient interface {
	Send(*EncryptDocStreamReq) error
	Recv() (*EncryptDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceEncryptDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceEncryptDocumentStreamClient) Send(m *EncryptDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceEncryptDocumentStreamClient) Recv() (*EncryptDocStreamResp, error) {
	m := new(EncryptDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) EncryptDocument(ctx context.Context, in *EncryptDocReq, opts ...grpc.CallOption) (*EncryptDocResp, error) {
	out := new(EncryptDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/EncryptDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DecryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_DecryptDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[3], "/proto.StrongDocService/DecryptDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceDecryptDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_DecryptDocumentStreamClient interface {
	Send(*DecryptDocStreamReq) error
	Recv() (*DecryptDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceDecryptDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceDecryptDocumentStreamClient) Send(m *DecryptDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceDecryptDocumentStreamClient) Recv() (*DecryptDocStreamResp, error) {
	m := new(DecryptDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) DecryptDocument(ctx context.Context, in *DecryptDocReq, opts ...grpc.CallOption) (*DecryptDocResp, error) {
	out := new(DecryptDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DecryptDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ShareDocument(ctx context.Context, in *ShareDocumentRequest, opts ...grpc.CallOption) (*ShareDocumentResponse, error) {
	out := new(ShareDocumentResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ShareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UnshareDocument(ctx context.Context, in *UnshareDocumentRequest, opts ...grpc.CallOption) (*UnshareDocumentResponse, error) {
	out := new(UnshareDocumentResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UnshareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetDocumentsSize(ctx context.Context, in *GetDocumentsSizeRequest, opts ...grpc.CallOption) (*GetDocumentsSizeResponse, error) {
	out := new(GetDocumentsSizeResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetDocumentsSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetIndexSize(ctx context.Context, in *GetIndexSizeRequest, opts ...grpc.CallOption) (*GetIndexSizeResponse, error) {
	out := new(GetIndexSizeResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetIndexSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) AddSharableOrg(ctx context.Context, in *AddSharableOrgRequest, opts ...grpc.CallOption) (*AddSharableOrgResponse, error) {
	out := new(AddSharableOrgResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/AddSharableOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveSharableOrg(ctx context.Context, in *RemoveSharableOrgRequest, opts ...grpc.CallOption) (*RemoveSharableOrgResponse, error) {
	out := new(RemoveSharableOrgResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveSharableOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetMultiLevelSharing(ctx context.Context, in *SetMultiLevelSharingRequest, opts ...grpc.CallOption) (*SetMultiLevelSharingResponse, error) {
	out := new(SetMultiLevelSharingResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetMultiLevelSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetBillingDetails(ctx context.Context, in *GetBillingDetailsRequest, opts ...grpc.CallOption) (*GetBillingDetailsResponse, error) {
	out := new(GetBillingDetailsResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetBillingDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetBillingPeriod(ctx context.Context, in *GetBillingPeriodRequest, opts ...grpc.CallOption) (*GetBillingPeriodResponse, error) {
	out := new(GetBillingPeriodResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetBillingPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetBillingPeriod(ctx context.Context, in *SetBillingPeriodRequest, opts ...grpc.CallOption) (*SetBillingPeriodResponse, error) {
	out := new(SetBillingPeriodResponse)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetBillingPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetConfiguration(ctx context.Context, in *GetConfigurationReq, opts ...grpc.CallOption) (*GetConfigurationResp, error) {
	out := new(GetConfigurationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrongDocServiceServer is the server API for StrongDocService service.
type StrongDocServiceServer interface {
	// Registers a new organization
	//
	// The user who created the organization is automatically an administrator
	//
	// Does not require Login
	RegisterOrganization(context.Context, *RegisterOrganizationRequest) (*RegisterOrganizationResponse, error)
	// Remove an organization and its search indexes
	//
	// Requires Administrator privilege. Only an administrator can remove the whole organization
	//
	// Requires Login
	RemoveOrganization(context.Context, *RemoveOrganizationRequest) (*RemoveOrganizationResponse, error)
	// Register new user
	//
	// Creates new user if it doesn't already exist. If the user already exist, and
	// error is thrown
	//
	// Requires administrator privilege
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// List the users of the organization
	//
	// Requires Login
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Remove user from organization
	//
	// Removes the user from the organization. The users documents still exists,
	// but belong to the organization, only accessible by organization admin.
	//
	// Requires administrator privilege.
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	// Promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PromoteUser(context.Context, *PromoteUserRequest) (*PromoteUserResponse, error)
	// Demote administrator to regular user at the organization. Attempting to
	// demote the last administrator of an organization will fail
	//
	// Requires administrator privilege.
	DemoteUser(context.Context, *DemoteUserRequest) (*DemoteUserResponse, error)
	// List the documents the user can access
	//
	// Administrators can see all documents belonging to the organization
	//
	// Requires Login
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// Remove document the user can access
	//
	// Admin user can remove document for the whole organization
	// Regular user only can remove document for him/herself
	//
	// Requires Login
	RemoveDocument(context.Context, *RemoveDocumentRequest) (*RemoveDocumentResponse, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocumentStream(StrongDocService_UploadDocumentStreamServer) error
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocument(context.Context, *UploadDocReq) (*UploadDocResp, error)
	// Download document stream
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocumentStream(*DownloadDocStreamReq, StrongDocService_DownloadDocumentStreamServer) error
	// Download document
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocument(context.Context, *DownloadDocReq) (*DownloadDocResp, error)
	// Encrypt document stream encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocumentStream(StrongDocService_EncryptDocumentStreamServer) error
	// Encrypt document encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocument(context.Context, *EncryptDocReq) (*EncryptDocResp, error)
	// Decrypt document stream decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	//
	// Requires Login
	DecryptDocumentStream(StrongDocService_DecryptDocumentStreamServer) error
	// Decrypt document decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	DecryptDocument(context.Context, *DecryptDocReq) (*DecryptDocResp, error)
	// Share a document to another user
	//
	// Requires Login
	ShareDocument(context.Context, *ShareDocumentRequest) (*ShareDocumentResponse, error)
	// Unshare a document that had previously been shared to a user
	//
	// Requires Login
	UnshareDocument(context.Context, *UnshareDocumentRequest) (*UnshareDocumentResponse, error)
	// Obtain the size of the user's stored documents
	//
	// Admin user can see the size of the documents which belong to the company
	//
	// Requires Login
	GetDocumentsSize(context.Context, *GetDocumentsSizeRequest) (*GetDocumentsSizeResponse, error)
	// Obtain an authentication token to be used with other APIs
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout current user
	//
	// Requires Login
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Search within a list of user's accessible documents
	//
	// The response will include a list document id and its score when matches are found
	//
	// Requires Login
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Obtain size of the organization's indexes
	//
	// Requires Login
	GetIndexSize(context.Context, *GetIndexSizeRequest) (*GetIndexSizeResponse, error)
	//Add a sharable organization to the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	AddSharableOrg(context.Context, *AddSharableOrgRequest) (*AddSharableOrgResponse, error)
	//Remove a sharable organization from the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	RemoveSharableOrg(context.Context, *RemoveSharableOrgRequest) (*RemoveSharableOrgResponse, error)
	//Update the organization's multi-level sharing setting
	//
	//Requires Administrator privilege.
	//Requires Login
	SetMultiLevelSharing(context.Context, *SetMultiLevelSharingRequest) (*SetMultiLevelSharingResponse, error)
	//List all items of the cost breakdown and also other details such as the billing period
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingDetails(context.Context, *GetBillingDetailsRequest) (*GetBillingDetailsResponse, error)
	//Obtain the billing period
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingPeriod(context.Context, *GetBillingPeriodRequest) (*GetBillingPeriodResponse, error)
	//Change the billing period
	//
	//Requires Administrator privilege
	//Requires Login
	SetBillingPeriod(context.Context, *SetBillingPeriodRequest) (*SetBillingPeriodResponse, error)
	//Show current server configuration
	//
	//Requires Administrator privilege. Only an administrator can see server configuration
	//Requires Login
	GetConfiguration(context.Context, *GetConfigurationReq) (*GetConfigurationResp, error)
}

// UnimplementedStrongDocServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStrongDocServiceServer struct {
}

func (*UnimplementedStrongDocServiceServer) RegisterOrganization(ctx context.Context, req *RegisterOrganizationRequest) (*RegisterOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveOrganization(ctx context.Context, req *RemoveOrganizationRequest) (*RemoveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) RegisterUser(ctx context.Context, req *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListUsers(ctx context.Context, req *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveUser(ctx context.Context, req *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) PromoteUser(ctx context.Context, req *PromoteUserRequest) (*PromoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) DemoteUser(ctx context.Context, req *DemoteUserRequest) (*DemoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListDocuments(ctx context.Context, req *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveDocument(ctx context.Context, req *RemoveDocumentRequest) (*RemoveDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocumentStream(srv StrongDocService_UploadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocument(ctx context.Context, req *UploadDocReq) (*UploadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocumentStream(req *DownloadDocStreamReq, srv StrongDocService_DownloadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocument(ctx context.Context, req *DownloadDocReq) (*DownloadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) EncryptDocumentStream(srv StrongDocService_EncryptDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EncryptDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) EncryptDocument(ctx context.Context, req *EncryptDocReq) (*EncryptDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) DecryptDocumentStream(srv StrongDocService_DecryptDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DecryptDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) DecryptDocument(ctx context.Context, req *DecryptDocReq) (*DecryptDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) ShareDocument(ctx context.Context, req *ShareDocumentRequest) (*ShareDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) UnshareDocument(ctx context.Context, req *UnshareDocumentRequest) (*UnshareDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetDocumentsSize(ctx context.Context, req *GetDocumentsSizeRequest) (*GetDocumentsSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsSize not implemented")
}
func (*UnimplementedStrongDocServiceServer) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedStrongDocServiceServer) Logout(ctx context.Context, req *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedStrongDocServiceServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetIndexSize(ctx context.Context, req *GetIndexSizeRequest) (*GetIndexSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexSize not implemented")
}
func (*UnimplementedStrongDocServiceServer) AddSharableOrg(ctx context.Context, req *AddSharableOrgRequest) (*AddSharableOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSharableOrg not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveSharableOrg(ctx context.Context, req *RemoveSharableOrgRequest) (*RemoveSharableOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSharableOrg not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetMultiLevelSharing(ctx context.Context, req *SetMultiLevelSharingRequest) (*SetMultiLevelSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiLevelSharing not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetBillingDetails(ctx context.Context, req *GetBillingDetailsRequest) (*GetBillingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingDetails not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetBillingPeriod(ctx context.Context, req *GetBillingPeriodRequest) (*GetBillingPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingPeriod not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetBillingPeriod(ctx context.Context, req *SetBillingPeriodRequest) (*SetBillingPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBillingPeriod not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetConfiguration(ctx context.Context, req *GetConfigurationReq) (*GetConfigurationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}

func RegisterStrongDocServiceServer(s *grpc.Server, srv StrongDocServiceServer) {
	s.RegisterService(&_StrongDocService_serviceDesc, srv)
}

func _StrongDocService_RegisterOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RegisterOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RegisterOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RegisterOrganization(ctx, req.(*RegisterOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveOrganization(ctx, req.(*RemoveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PromoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PromoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PromoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PromoteUser(ctx, req.(*PromoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DemoteUser(ctx, req.(*DemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveDocument(ctx, req.(*RemoveDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UploadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).UploadDocumentStream(&strongDocServiceUploadDocumentStreamServer{stream})
}

type StrongDocService_UploadDocumentStreamServer interface {
	SendAndClose(*UploadDocStreamResp) error
	Recv() (*UploadDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceUploadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceUploadDocumentStreamServer) SendAndClose(m *UploadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceUploadDocumentStreamServer) Recv() (*UploadDocStreamReq, error) {
	m := new(UploadDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UploadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UploadDocument(ctx, req.(*UploadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DownloadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDocStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrongDocServiceServer).DownloadDocumentStream(m, &strongDocServiceDownloadDocumentStreamServer{stream})
}

type StrongDocService_DownloadDocumentStreamServer interface {
	Send(*DownloadDocStreamResp) error
	grpc.ServerStream
}

type strongDocServiceDownloadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceDownloadDocumentStreamServer) Send(m *DownloadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _StrongDocService_DownloadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DownloadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DownloadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DownloadDocument(ctx, req.(*DownloadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_EncryptDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).EncryptDocumentStream(&strongDocServiceEncryptDocumentStreamServer{stream})
}

type StrongDocService_EncryptDocumentStreamServer interface {
	Send(*EncryptDocStreamResp) error
	Recv() (*EncryptDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceEncryptDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceEncryptDocumentStreamServer) Send(m *EncryptDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceEncryptDocumentStreamServer) Recv() (*EncryptDocStreamReq, error) {
	m := new(EncryptDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_EncryptDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).EncryptDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/EncryptDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).EncryptDocument(ctx, req.(*EncryptDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DecryptDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).DecryptDocumentStream(&strongDocServiceDecryptDocumentStreamServer{stream})
}

type StrongDocService_DecryptDocumentStreamServer interface {
	Send(*DecryptDocStreamResp) error
	Recv() (*DecryptDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceDecryptDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceDecryptDocumentStreamServer) Send(m *DecryptDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceDecryptDocumentStreamServer) Recv() (*DecryptDocStreamReq, error) {
	m := new(DecryptDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_DecryptDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DecryptDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DecryptDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DecryptDocument(ctx, req.(*DecryptDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ShareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ShareDocument(ctx, req.(*ShareDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UnshareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UnshareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UnshareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UnshareDocument(ctx, req.(*UnshareDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetDocumentsSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentsSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetDocumentsSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetDocumentsSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetDocumentsSize(ctx, req.(*GetDocumentsSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetIndexSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetIndexSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetIndexSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetIndexSize(ctx, req.(*GetIndexSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_AddSharableOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSharableOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).AddSharableOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/AddSharableOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).AddSharableOrg(ctx, req.(*AddSharableOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveSharableOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSharableOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveSharableOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveSharableOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveSharableOrg(ctx, req.(*RemoveSharableOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetMultiLevelSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMultiLevelSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetMultiLevelSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetMultiLevelSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetMultiLevelSharing(ctx, req.(*SetMultiLevelSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetBillingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetBillingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetBillingDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetBillingDetails(ctx, req.(*GetBillingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetBillingPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetBillingPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetBillingPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetBillingPeriod(ctx, req.(*GetBillingPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetBillingPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBillingPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetBillingPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetBillingPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetBillingPeriod(ctx, req.(*SetBillingPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetConfiguration(ctx, req.(*GetConfigurationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StrongDocService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StrongDocService",
	HandlerType: (*StrongDocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrganization",
			Handler:    _StrongDocService_RegisterOrganization_Handler,
		},
		{
			MethodName: "RemoveOrganization",
			Handler:    _StrongDocService_RemoveOrganization_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _StrongDocService_RegisterUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _StrongDocService_ListUsers_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _StrongDocService_RemoveUser_Handler,
		},
		{
			MethodName: "PromoteUser",
			Handler:    _StrongDocService_PromoteUser_Handler,
		},
		{
			MethodName: "DemoteUser",
			Handler:    _StrongDocService_DemoteUser_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _StrongDocService_ListDocuments_Handler,
		},
		{
			MethodName: "RemoveDocument",
			Handler:    _StrongDocService_RemoveDocument_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _StrongDocService_UploadDocument_Handler,
		},
		{
			MethodName: "DownloadDocument",
			Handler:    _StrongDocService_DownloadDocument_Handler,
		},
		{
			MethodName: "EncryptDocument",
			Handler:    _StrongDocService_EncryptDocument_Handler,
		},
		{
			MethodName: "DecryptDocument",
			Handler:    _StrongDocService_DecryptDocument_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _StrongDocService_ShareDocument_Handler,
		},
		{
			MethodName: "UnshareDocument",
			Handler:    _StrongDocService_UnshareDocument_Handler,
		},
		{
			MethodName: "GetDocumentsSize",
			Handler:    _StrongDocService_GetDocumentsSize_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StrongDocService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _StrongDocService_Logout_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _StrongDocService_Search_Handler,
		},
		{
			MethodName: "GetIndexSize",
			Handler:    _StrongDocService_GetIndexSize_Handler,
		},
		{
			MethodName: "AddSharableOrg",
			Handler:    _StrongDocService_AddSharableOrg_Handler,
		},
		{
			MethodName: "RemoveSharableOrg",
			Handler:    _StrongDocService_RemoveSharableOrg_Handler,
		},
		{
			MethodName: "SetMultiLevelSharing",
			Handler:    _StrongDocService_SetMultiLevelSharing_Handler,
		},
		{
			MethodName: "GetBillingDetails",
			Handler:    _StrongDocService_GetBillingDetails_Handler,
		},
		{
			MethodName: "GetBillingPeriod",
			Handler:    _StrongDocService_GetBillingPeriod_Handler,
		},
		{
			MethodName: "SetBillingPeriod",
			Handler:    _StrongDocService_SetBillingPeriod_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _StrongDocService_GetConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDocumentStream",
			Handler:       _StrongDocService_UploadDocumentStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadDocumentStream",
			Handler:       _StrongDocService_DownloadDocumentStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EncryptDocumentStream",
			Handler:       _StrongDocService_EncryptDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DecryptDocumentStream",
			Handler:       _StrongDocService_DecryptDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strongdoc.proto",
}
