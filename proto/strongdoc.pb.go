// Code generated by protoc-gen-go. DO NOT EDIT.
// source: strongdoc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetConfigurationReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigurationReq) Reset()         { *m = GetConfigurationReq{} }
func (m *GetConfigurationReq) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationReq) ProtoMessage()    {}
func (*GetConfigurationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{0}
}

func (m *GetConfigurationReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationReq.Unmarshal(m, b)
}
func (m *GetConfigurationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationReq.Marshal(b, m, deterministic)
}
func (m *GetConfigurationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationReq.Merge(m, src)
}
func (m *GetConfigurationReq) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationReq.Size(m)
}
func (m *GetConfigurationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationReq proto.InternalMessageInfo

type GetConfigurationResp struct {
	Configuration        string   `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigurationResp) Reset()         { *m = GetConfigurationResp{} }
func (m *GetConfigurationResp) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationResp) ProtoMessage()    {}
func (*GetConfigurationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d003557e9d9c9339, []int{1}
}

func (m *GetConfigurationResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationResp.Unmarshal(m, b)
}
func (m *GetConfigurationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationResp.Marshal(b, m, deterministic)
}
func (m *GetConfigurationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationResp.Merge(m, src)
}
func (m *GetConfigurationResp) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationResp.Size(m)
}
func (m *GetConfigurationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationResp proto.InternalMessageInfo

func (m *GetConfigurationResp) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

func init() {
	proto.RegisterType((*GetConfigurationReq)(nil), "proto.GetConfigurationReq")
	proto.RegisterType((*GetConfigurationResp)(nil), "proto.GetConfigurationResp")
}

func init() { proto.RegisterFile("strongdoc.proto", fileDescriptor_d003557e9d9c9339) }

var fileDescriptor_d003557e9d9c9339 = []byte{
	// 2086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdb, 0x6e, 0x24, 0x47,
	0x19, 0x4e, 0x1b, 0x65, 0x45, 0x6a, 0x7d, 0x2c, 0x8f, 0x3d, 0xf6, 0xf8, 0xb0, 0xb3, 0x05, 0x89,
	0x8d, 0x89, 0xdd, 0xbb, 0x4e, 0x20, 0x60, 0x01, 0x8a, 0xed, 0x99, 0xb5, 0x56, 0xeb, 0x4d, 0x8c,
	0x27, 0x1b, 0x24, 0x6e, 0x50, 0xb9, 0xbb, 0xa6, 0xa7, 0xe3, 0x71, 0x57, 0xb9, 0xab, 0xc6, 0xf6,
	0xc4, 0xac, 0x08, 0x88, 0x43, 0x84, 0x84, 0x10, 0x41, 0x02, 0x11, 0x21, 0x71, 0xc1, 0x33, 0xf0,
	0x1a, 0xdc, 0xf0, 0x0a, 0x3c, 0x00, 0x8f, 0x80, 0xaa, 0x0f, 0xd5, 0x55, 0x7d, 0xf0, 0xcc, 0x4a,
	0xb9, 0xb2, 0xfa, 0xfb, 0xba, 0xfe, 0xef, 0xfb, 0xeb, 0xd4, 0xff, 0x3f, 0x06, 0x33, 0x5c, 0x84,
	0x34, 0xf0, 0x5c, 0xea, 0xec, 0xb0, 0x90, 0x0a, 0x0a, 0x5f, 0x8f, 0xfe, 0x34, 0x56, 0x3d, 0x4a,
	0xbd, 0x3e, 0xb1, 0x31, 0xf3, 0x6d, 0x1c, 0x04, 0x54, 0x60, 0xe1, 0xd3, 0x80, 0xc7, 0x2f, 0x35,
	0xde, 0x8e, 0xfe, 0x38, 0xdb, 0x1e, 0x09, 0xb6, 0xf9, 0x35, 0xf6, 0x3c, 0x12, 0xda, 0x94, 0x45,
	0x6f, 0x94, 0xbc, 0x3d, 0xed, 0x52, 0x67, 0x70, 0x41, 0x02, 0x91, 0x3c, 0x2f, 0xa4, 0xcf, 0x1f,
	0xd0, 0x8e, 0xa0, 0x21, 0x49, 0xe0, 0x49, 0x4e, 0x70, 0xe8, 0xf4, 0xd2, 0x41, 0xd8, 0x71, 0xe8,
	0x20, 0x10, 0x69, 0x90, 0xa9, 0x33, 0xbf, 0xdf, 0xf7, 0x03, 0x2f, 0x79, 0x9c, 0x25, 0x81, 0x13,
	0x0e, 0x23, 0xc9, 0x18, 0x41, 0x0b, 0x60, 0xfe, 0x88, 0x88, 0x43, 0x1a, 0x74, 0x7d, 0x6f, 0x10,
	0x46, 0x06, 0x4e, 0xc9, 0x25, 0xfa, 0x01, 0xa8, 0x15, 0x61, 0xce, 0xe0, 0x37, 0xc1, 0x94, 0xa3,
	0x83, 0x4b, 0x56, 0xd3, 0xda, 0x7c, 0xe3, 0xd4, 0x04, 0x77, 0xff, 0xfd, 0x2e, 0x98, 0xed, 0x44,
	0x33, 0xd4, 0xa2, 0x4e, 0x87, 0x84, 0x57, 0xbe, 0x43, 0xe0, 0xaf, 0x2d, 0x50, 0x3b, 0x25, 0x9e,
	0xcf, 0x05, 0x09, 0x3f, 0x0c, 0x3d, 0x1c, 0xf8, 0x9f, 0x46, 0x6f, 0xc3, 0xf5, 0xd8, 0xca, 0x4e,
	0x19, 0x79, 0x4a, 0x2e, 0x1b, 0x0f, 0xee, 0xe4, 0x39, 0x43, 0xdf, 0xfe, 0xd5, 0x7f, 0xfe, 0xfb,
	0xe7, 0x89, 0x37, 0x51, 0xd3, 0xbe, 0x7a, 0x6c, 0x27, 0x13, 0x60, 0x87, 0x25, 0x6f, 0xef, 0x59,
	0x5b, 0xf0, 0x73, 0x0b, 0x2c, 0x9e, 0x12, 0xec, 0x08, 0xff, 0x0a, 0x0b, 0xf2, 0xd5, 0x1a, 0xd9,
	0x8e, 0x8c, 0x6c, 0x20, 0x64, 0x1a, 0x29, 0x13, 0x93, 0x56, 0xfe, 0x62, 0x01, 0x78, 0x4a, 0x2e,
	0xe8, 0x95, 0x69, 0x63, 0x55, 0xc9, 0xe4, 0x29, 0x69, 0x62, 0xed, 0x0e, 0x96, 0x33, 0x74, 0xf8,
	0xc5, 0x3e, 0x3c, 0x9b, 0x05, 0xd3, 0x00, 0xec, 0x33, 0xff, 0x19, 0x19, 0xee, 0x0f, 0x44, 0x0f,
	0xbe, 0x16, 0xf9, 0xda, 0xdc, 0x7a, 0xcb, 0xf4, 0x95, 0x0f, 0x60, 0xdf, 0x76, 0x69, 0xe8, 0x90,
	0x97, 0x70, 0x08, 0x26, 0xd3, 0x1c, 0x5f, 0x70, 0x12, 0xc2, 0xc5, 0x5c, 0xe2, 0x12, 0x94, 0x5e,
	0xea, 0xa5, 0x38, 0x67, 0xe8, 0x7b, 0xd5, 0x2e, 0xd6, 0xd0, 0x52, 0xd9, 0x32, 0xc9, 0xa1, 0x72,
	0x4e, 0x3e, 0x01, 0x6f, 0x1c, 0xfb, 0x5c, 0xc8, 0x47, 0x0e, 0xe7, 0x93, 0xf8, 0x0a, 0x91, 0xa2,
	0xb5, 0x22, 0xc8, 0x19, 0xda, 0xad, 0x56, 0xac, 0xc3, 0x05, 0x5d, 0xb1, 0xaf, 0xc2, 0x5f, 0x02,
	0x10, 0xcf, 0x62, 0x94, 0x64, 0xcd, 0x98, 0xd8, 0x34, 0xc5, 0x85, 0x12, 0x94, 0x33, 0xf4, 0xdd,
	0x6a, 0xb9, 0x15, 0xb4, 0x58, 0x9c, 0xe6, 0x34, 0xbd, 0x01, 0xb8, 0x7f, 0x12, 0xd2, 0x0b, 0x2a,
	0x62, 0xcd, 0x34, 0xba, 0x86, 0x49, 0xd1, 0xc5, 0x32, 0x98, 0x33, 0xf4, 0x5e, 0xb5, 0xea, 0x2a,
	0xaa, 0xeb, 0xaa, 0x2c, 0x1b, 0x29, 0x65, 0x2f, 0x01, 0x68, 0x11, 0xa5, 0x9a, 0x66, 0x9a, 0x41,
	0x7a, 0xa6, 0x3a, 0xfa, 0x4a, 0x99, 0xba, 0xc4, 0x94, 0x9c, 0x92, 0x2b, 0xd4, 0x4a, 0x2e, 0x2d,
	0x0e, 0xeb, 0xda, 0xba, 0x29, 0x54, 0x0a, 0x2f, 0x95, 0x13, 0xf2, 0x3c, 0x55, 0x6b, 0x43, 0x38,
	0x2b, 0xb5, 0x5d, 0xea, 0x44, 0x0b, 0xda, 0xa2, 0x0e, 0x87, 0x9f, 0x82, 0xe9, 0x78, 0x99, 0xd2,
	0x28, 0x70, 0xc9, 0x58, 0xbd, 0x14, 0x96, 0xa2, 0xcb, 0x15, 0x0c, 0x67, 0xe8, 0x9d, 0x6a, 0xd5,
	0xa5, 0xad, 0xc5, 0x54, 0x35, 0x5e, 0x57, 0xfb, 0xd6, 0xa5, 0xce, 0xd3, 0xd6, 0x4b, 0xf8, 0x63,
	0x50, 0x7b, 0xc1, 0xfa, 0x14, 0xbb, 0x69, 0xa8, 0x8e, 0x08, 0x09, 0xbe, 0x80, 0xa9, 0x8e, 0x22,
	0x63, 0x5c, 0x5a, 0x68, 0x54, 0x51, 0x9c, 0xa1, 0xd7, 0x36, 0x2d, 0x78, 0x0e, 0xa6, 0xcd, 0x90,
	0xea, 0x3c, 0x28, 0x58, 0x3f, 0x0f, 0x1a, 0xc8, 0x19, 0xda, 0xa9, 0x4e, 0x62, 0x1e, 0x4d, 0xa7,
	0x49, 0x0c, 0xa2, 0x31, 0x72, 0xb9, 0x7e, 0x02, 0x16, 0x5b, 0xf4, 0x3a, 0x28, 0xc9, 0x60, 0x25,
	0xdd, 0x17, 0x19, 0x9d, 0xe5, 0xb0, 0x5a, 0x4d, 0xca, 0x2c, 0x1e, 0x59, 0xf0, 0x06, 0xcc, 0xe6,
	0x03, 0xab, 0x6d, 0xaf, 0x11, 0xfa, 0xb6, 0x37, 0x60, 0xce, 0xd0, 0x77, 0xaa, 0x73, 0x69, 0xc0,
	0xa5, 0x34, 0x17, 0x37, 0x19, 0xa5, 0x96, 0xe4, 0x63, 0xb0, 0xd0, 0x8e, 0x3f, 0x77, 0xb9, 0x8c,
	0xd2, 0x89, 0xcf, 0xd8, 0x2c, 0xa1, 0x95, 0x4a, 0x2e, 0x5e, 0x95, 0x47, 0x16, 0xa4, 0x60, 0x26,
	0x17, 0x57, 0x9d, 0xa8, 0x0c, 0xd7, 0x4f, 0x94, 0x8e, 0x72, 0x86, 0xec, 0xea, 0x74, 0x6a, 0x68,
	0x26, 0x4d, 0x27, 0xf9, 0x52, 0xcb, 0xb5, 0xf9, 0x18, 0x2c, 0xb4, 0xc8, 0x5d, 0x89, 0x64, 0x6c,
	0x31, 0x91, 0x22, 0xa7, 0x12, 0x11, 0x60, 0x26, 0x17, 0x57, 0xbb, 0x1a, 0xca, 0x12, 0xd1, 0x51,
	0xce, 0xd0, 0xbb, 0xd5, 0x89, 0x2c, 0xc3, 0xba, 0x5a, 0x97, 0x78, 0x90, 0x5a, 0x16, 0x01, 0xa6,
	0x3a, 0x3d, 0x1c, 0x66, 0x87, 0x34, 0xbd, 0x18, 0x0c, 0x54, 0xbf, 0x18, 0x72, 0x04, 0x67, 0xe8,
	0x51, 0xb5, 0xf2, 0x02, 0x52, 0x17, 0x03, 0x4f, 0xc6, 0xc9, 0x39, 0xfc, 0x39, 0x98, 0x79, 0x11,
	0x70, 0x43, 0x57, 0x1d, 0x4d, 0x13, 0x37, 0x8e, 0x66, 0x9e, 0x1a, 0xf1, 0xa5, 0x41, 0x50, 0x9d,
	0xac, 0x40, 0x57, 0x6f, 0x83, 0xd7, 0x8f, 0xa9, 0xe7, 0x07, 0x70, 0x26, 0xbd, 0xeb, 0xe4, 0x93,
	0x54, 0x9a, 0x35, 0x01, 0xce, 0xd0, 0xb2, 0x7e, 0x48, 0xf1, 0x40, 0xf4, 0xec, 0xbe, 0xe4, 0xe2,
	0x8d, 0x70, 0xef, 0x98, 0x7a, 0x74, 0x20, 0xa0, 0x36, 0x8c, 0x0e, 0x22, 0xcb, 0x73, 0x39, 0x84,
	0x33, 0xb4, 0x51, 0xed, 0x74, 0x12, 0x01, 0x19, 0xbe, 0x1f, 0x47, 0x3b, 0x03, 0xf7, 0x3a, 0x51,
	0x15, 0xa9, 0xe2, 0xc6, 0x8f, 0x7a, 0xdc, 0x14, 0x19, 0x71, 0x41, 0x42, 0x75, 0x41, 0xc6, 0x75,
	0xa9, 0x7d, 0x7b, 0x39, 0x20, 0xe1, 0xf0, 0x25, 0xfc, 0xa5, 0x05, 0xa6, 0xf7, 0x5d, 0x57, 0xae,
	0x25, 0x3e, 0xeb, 0xcb, 0xba, 0x43, 0xdd, 0xce, 0x26, 0xac, 0xdf, 0xce, 0x79, 0x86, 0x33, 0xb4,
	0x57, 0x2d, 0xfe, 0x60, 0xb7, 0xa1, 0x7f, 0x8f, 0xb0, 0x31, 0x58, 0xce, 0xdf, 0x1f, 0x2c, 0x30,
	0x17, 0x5f, 0xf8, 0xba, 0x8d, 0x15, 0xe3, 0x53, 0x90, 0x73, 0xb2, 0x5a, 0x4d, 0x72, 0x86, 0x7e,
	0x58, 0x6d, 0x06, 0xed, 0xae, 0x15, 0xcb, 0x80, 0x9c, 0x9f, 0xbf, 0x59, 0xa0, 0xd6, 0x21, 0xe2,
	0xf9, 0xa0, 0x2f, 0xfc, 0x63, 0x72, 0x45, 0xfa, 0x92, 0xf7, 0x03, 0x4f, 0x55, 0xa2, 0x65, 0xa4,
	0x5e, 0x89, 0x96, 0xf3, 0x9c, 0xa1, 0xf7, 0xab, 0x8d, 0xbd, 0xd9, 0x30, 0xea, 0x64, 0x5e, 0x12,
	0x42, 0x7a, 0x93, 0xeb, 0xd5, 0x21, 0x62, 0x3f, 0x7e, 0xed, 0x69, 0xd0, 0xa5, 0x6a, 0xbd, 0x4c,
	0x58, 0x5f, 0xaf, 0x3c, 0x33, 0x62, 0xbd, 0x1a, 0x8d, 0x9c, 0x13, 0x6d, 0xb0, 0xf4, 0xf0, 0x99,
	0x05, 0xe6, 0x8e, 0x88, 0x38, 0x88, 0x7b, 0x98, 0x16, 0x11, 0xd8, 0xef, 0x73, 0xb5, 0x5e, 0x05,
	0x46, 0x5f, 0xaf, 0x12, 0x72, 0xc4, 0xbd, 0x01, 0xe7, 0x75, 0x33, 0x49, 0xdf, 0x04, 0xff, 0x6e,
	0x81, 0x7a, 0x16, 0xeb, 0x49, 0x48, 0x2e, 0x07, 0x24, 0x70, 0x86, 0xb2, 0x56, 0x81, 0x0f, 0x0b,
	0x5a, 0x06, 0x2f, 0xed, 0xa0, 0x51, 0xaf, 0x8c, 0x98, 0x21, 0xb8, 0x56, 0x62, 0xca, 0xee, 0xa6,
	0x31, 0xe0, 0x3f, 0x2c, 0x50, 0xef, 0x10, 0xf1, 0x01, 0xb9, 0x29, 0xc4, 0x57, 0xf6, 0x2a, 0x78,
	0xdd, 0x5e, 0xe5, 0x2b, 0x23, 0xf6, 0x78, 0xe3, 0x6e, 0x7b, 0x72, 0x0d, 0x7f, 0x01, 0x66, 0x8e,
	0x88, 0x38, 0xc6, 0xa1, 0x47, 0x3e, 0x0a, 0x71, 0xb7, 0xeb, 0x3b, 0xea, 0xe2, 0xcd, 0xe1, 0xfa,
	0xc5, 0x5b, 0xa0, 0xc6, 0x2a, 0x03, 0x54, 0x89, 0xaf, 0xab, 0x51, 0x30, 0x7d, 0x54, 0xbe, 0x8f,
	0x8f, 0x2a, 0xf7, 0xf1, 0x51, 0x71, 0x1f, 0x6f, 0x56, 0xab, 0x4f, 0xc1, 0xfb, 0x9a, 0x3a, 0x3c,
	0x07, 0xf7, 0x8f, 0x48, 0xd4, 0x62, 0x44, 0x6a, 0x0b, 0x59, 0xcc, 0x14, 0xd3, 0x8b, 0x1d, 0x03,
	0x1e, 0xab, 0xe6, 0x4d, 0xb3, 0x1c, 0xc8, 0x5a, 0xfe, 0x4f, 0x16, 0x80, 0x87, 0x3d, 0x1c, 0x78,
	0x51, 0xe1, 0x7d, 0x82, 0x39, 0xbf, 0xa6, 0xa1, 0xab, 0x7a, 0xc8, 0x22, 0xa5, 0xf7, 0x90, 0x65,
	0x2c, 0x67, 0xe8, 0x47, 0xd5, 0x16, 0xbe, 0xd1, 0x58, 0xd7, 0x2d, 0x38, 0x85, 0x00, 0x49, 0x93,
	0xd3, 0x29, 0x99, 0x80, 0x4e, 0xf9, 0x04, 0x74, 0x72, 0x13, 0x70, 0x57, 0x93, 0xd3, 0xa8, 0xe7,
	0x2e, 0x8c, 0x74, 0xa4, 0x94, 0xbd, 0x01, 0x33, 0xf2, 0x4c, 0x1d, 0x86, 0xc4, 0xf5, 0xc5, 0x21,
	0x0e, 0x5d, 0xae, 0x76, 0x5a, 0x0e, 0xd7, 0x77, 0x5a, 0x81, 0x1a, 0x51, 0x3c, 0xc3, 0x39, 0x69,
	0x21, 0xdd, 0xea, 0x4e, 0x24, 0xf3, 0x5b, 0x0b, 0xcc, 0xee, 0xbb, 0xee, 0x09, 0x1e, 0xca, 0x2a,
	0xe1, 0x39, 0x11, 0x3d, 0xea, 0xaa, 0xe2, 0x2c, 0x4f, 0xe8, 0xc5, 0x59, 0x91, 0xe3, 0x0c, 0x7d,
	0xbf, 0x5a, 0x7d, 0x1d, 0x2d, 0xeb, 0xea, 0x4c, 0x1f, 0x2b, 0xa7, 0xe0, 0x9f, 0xf1, 0x75, 0xd0,
	0x22, 0x5d, 0x3c, 0xe8, 0x0b, 0xd3, 0x8f, 0x76, 0x1d, 0x94, 0xf1, 0xb9, 0xeb, 0xa0, 0xfc, 0x15,
	0xce, 0xd0, 0x7e, 0xb5, 0xbb, 0xb7, 0x1a, 0x0f, 0x2b, 0xdd, 0xd9, 0x6e, 0x1c, 0x50, 0xba, 0xfc,
	0xd2, 0x02, 0xf3, 0xf1, 0xf7, 0xd4, 0x74, 0x68, 0xfe, 0xb4, 0x51, 0x70, 0xb7, 0x7e, 0x17, 0xcd,
	0x19, 0x6a, 0x55, 0x3b, 0xfb, 0xd6, 0xd6, 0x46, 0xb5, 0xb3, 0xb4, 0x93, 0x63, 0x17, 0xb2, 0x3c,
	0x0d, 0xc1, 0xa4, 0xdc, 0x12, 0x49, 0x78, 0xae, 0x7e, 0xfb, 0xd0, 0x41, 0xfd, 0xb7, 0x0f, 0x13,
	0xe7, 0x0c, 0x3d, 0xae, 0xb6, 0xb1, 0x08, 0x6b, 0x25, 0x36, 0x38, 0xbc, 0x01, 0xf3, 0xed, 0x40,
	0xd6, 0x05, 0xed, 0xdd, 0x76, 0x5b, 0xfd, 0x42, 0xa7, 0xda, 0x3d, 0xc5, 0xe9, 0xed, 0x9e, 0x06,
	0x8e, 0xd5, 0xa5, 0x27, 0xfd, 0x84, 0x4d, 0x94, 0x50, 0x7c, 0x66, 0xe6, 0xcc, 0x1e, 0xb3, 0xbd,
	0xdb, 0x56, 0x29, 0x2b, 0x26, 0x91, 0xae, 0x97, 0xe2, 0xe3, 0x97, 0xc4, 0xd1, 0xb0, 0x54, 0xf9,
	0x33, 0x0b, 0xcc, 0xe7, 0x1b, 0x43, 0x29, 0xbe, 0x54, 0x6c, 0x02, 0x13, 0xf9, 0xe5, 0x0a, 0x66,
	0x44, 0x27, 0x82, 0x6a, 0xf9, 0x0e, 0x31, 0xb5, 0x70, 0x9b, 0x74, 0x22, 0xcf, 0xc8, 0x90, 0x4b,
	0x4c, 0x25, 0x1e, 0xa1, 0xed, 0xdd, 0xb6, 0x24, 0xf4, 0xc4, 0x4d, 0x7c, 0xac, 0xa3, 0x9a, 0x4e,
	0x3b, 0xd7, 0x85, 0xa4, 0xf8, 0x4b, 0x30, 0x99, 0xf6, 0x35, 0x91, 0x76, 0xa3, 0xac, 0xd9, 0x49,
	0x32, 0x5f, 0xa9, 0xe4, 0xc6, 0xce, 0x9d, 0x6b, 0x5a, 0x52, 0xfe, 0x37, 0x16, 0x98, 0xce, 0xba,
	0x9b, 0xc8, 0xc1, 0x6a, 0x79, 0xd3, 0x93, 0x78, 0x58, 0xbb, 0x83, 0x1d, 0x6b, 0x03, 0x9a, 0x5d,
	0x51, 0xea, 0xa3, 0x0f, 0xc0, 0x11, 0x11, 0xcf, 0xc8, 0x30, 0xb2, 0x30, 0x9f, 0x7d, 0x14, 0x23,
	0x88, 0xe8, 0x3b, 0x5e, 0x03, 0xc7, 0x6a, 0x42, 0xd2, 0xa9, 0xf7, 0xb2, 0xf8, 0x2c, 0xfa, 0x34,
	0xab, 0xf5, 0x36, 0x23, 0xf3, 0x44, 0x6f, 0xa1, 0x04, 0x1d, 0xab, 0xdb, 0x35, 0x05, 0x63, 0x89,
	0x5b, 0x30, 0xf5, 0x82, 0xb9, 0x58, 0x90, 0xd4, 0x42, 0x76, 0xb8, 0x24, 0x1a, 0x6f, 0x26, 0xf3,
	0x70, 0xe9, 0xf8, 0x88, 0x3d, 0xd6, 0x30, 0xf6, 0xd8, 0x40, 0x17, 0x4a, 0xfa, 0x1d, 0x59, 0x7c,
	0x3d, 0xf1, 0xfb, 0xd9, 0x1e, 0xd7, 0x8a, 0x9f, 0x0c, 0x27, 0xb9, 0xe2, 0xc7, 0x60, 0x38, 0x43,
	0xed, 0x6a, 0x0f, 0x5b, 0x70, 0x33, 0x97, 0xbb, 0x1a, 0x1c, 0x38, 0x07, 0x91, 0x15, 0xfb, 0xf6,
	0x9c, 0x0c, 0xe5, 0xdd, 0xfa, 0x47, 0x0b, 0xc0, 0x38, 0x3f, 0xc3, 0xd2, 0x8a, 0x91, 0x7a, 0xce,
	0xd5, 0x6a, 0x35, 0x39, 0x56, 0xa9, 0x62, 0x4e, 0x8e, 0xae, 0x2b, 0x67, 0x28, 0x88, 0xb6, 0xdf,
	0x87, 0xd7, 0x81, 0x04, 0xf5, 0xfd, 0x90, 0x40, 0xb9, 0xfd, 0xa0, 0xd0, 0x57, 0xdd, 0x80, 0xa9,
	0xc2, 0x5f, 0x2d, 0x00, 0x4f, 0x42, 0xc2, 0xa2, 0x43, 0xa0, 0xae, 0x31, 0x75, 0xf4, 0x8a, 0x94,
	0x7e, 0xf4, 0xca, 0xd8, 0x11, 0xdf, 0x3d, 0xb8, 0x91, 0x1c, 0xbd, 0xe8, 0xb0, 0xda, 0xac, 0x10,
	0x41, 0xfd, 0x2c, 0xf3, 0xa5, 0x05, 0x6a, 0x89, 0x80, 0xf9, 0xf3, 0xcc, 0xba, 0xa9, 0x5e, 0xf8,
	0x95, 0xe6, 0xc1, 0x9d, 0xfc, 0x88, 0x8a, 0x01, 0x3d, 0x2c, 0xf3, 0x67, 0xc4, 0xd8, 0xb3, 0xb6,
	0x0e, 0xfe, 0x37, 0xf1, 0xc5, 0xfe, 0xbf, 0x26, 0xe0, 0x7b, 0x60, 0x4a, 0xfd, 0x5b, 0xa9, 0xb9,
	0x7f, 0xf2, 0x14, 0x3d, 0x04, 0x20, 0x06, 0x3a, 0xb8, 0x2f, 0x1a, 0xf3, 0x7e, 0xd0, 0xa5, 0xef,
	0xc7, 0xff, 0x9a, 0xe3, 0xb8, 0x2f, 0x76, 0x1c, 0x7a, 0xb1, 0xfb, 0xb5, 0xc7, 0x3b, 0x8f, 0x76,
	0x67, 0x31, 0x63, 0x7d, 0xdf, 0x89, 0xff, 0xcb, 0xf1, 0x09, 0xa7, 0xc1, 0x5e, 0x01, 0xf9, 0xe9,
	0xef, 0x2d, 0xf0, 0x3b, 0xcb, 0xf0, 0x38, 0xfc, 0xfa, 0x04, 0x74, 0x3f, 0xea, 0x91, 0xa6, 0x2c,
	0x6c, 0x9b, 0x1b, 0x07, 0x04, 0x87, 0x24, 0xdc, 0x68, 0xe2, 0xc0, 0x6d, 0xe2, 0x26, 0x67, 0xd8,
	0x21, 0x4d, 0x9f, 0x37, 0x65, 0xb3, 0xe3, 0x87, 0xc4, 0x6d, 0x9e, 0x91, 0x2e, 0x0d, 0x49, 0x53,
	0xf4, 0x48, 0x53, 0xd0, 0x73, 0x12, 0xec, 0x80, 0x27, 0x34, 0x6c, 0x92, 0x1b, 0x7c, 0xc1, 0xfa,
	0xe4, 0x6d, 0x10, 0x0f, 0x6f, 0xe2, 0x81, 0xe8, 0x91, 0x40, 0x24, 0xd2, 0x3f, 0x8b, 0xde, 0x6c,
	0x4c, 0x49, 0x3d, 0x1a, 0x26, 0xff, 0x87, 0x69, 0x4e, 0x84, 0x4f, 0x41, 0xfd, 0xb9, 0x0c, 0x86,
	0xcf, 0xe8, 0x40, 0x34, 0xbd, 0xd3, 0x93, 0xc3, 0xed, 0x23, 0x2c, 0xc8, 0x35, 0x1e, 0xc2, 0x9d,
	0x9e, 0x10, 0x8c, 0xef, 0xd9, 0xb6, 0xe7, 0x8b, 0xde, 0xe0, 0x4c, 0x26, 0x69, 0x7b, 0x21, 0x73,
	0xb6, 0x89, 0x43, 0xf9, 0x90, 0x0b, 0x92, 0x3c, 0x7a, 0xf1, 0xfb, 0x00, 0x39, 0xf4, 0x62, 0x47,
	0x9b, 0x94, 0xec, 0x5f, 0x97, 0xdc, 0x3d, 0x8f, 0xd7, 0xee, 0x60, 0x5a, 0x4d, 0xeb, 0x89, 0x7c,
	0xfe, 0xdc, 0xb2, 0xce, 0xee, 0x45, 0xcc, 0x3b, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x68, 0xbc,
	0xca, 0x51, 0xeb, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StrongDocServiceClient is the client API for StrongDocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StrongDocServiceClient interface {
	// Registers a new organization
	//
	// The user who created the organization is automatically an administrator
	//
	// Does not require Login
	RegisterOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error)
	// Reactivate an organization that was unsubscribed via aws
	//
	// The user reactivating the organization becomes the administrator
	//
	// Does not require login
	ReactivateOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error)
	// Remove an organization and its search indexes
	//
	// Requires Administrator privilege. Only an administrator can remove the whole organization
	//
	// Requires Login
	RemoveOrganization(ctx context.Context, in *RemoveOrganizationReq, opts ...grpc.CallOption) (*RemoveOrganizationResp, error)
	// Register new user
	//
	// Creates new user if it doesn't already exist. If the user already exist, and
	// error is thrown
	//
	// Requires administrator privilege
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error)
	// List the users of the organization
	//
	// Requires Login
	ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error)
	// Remove user from organization
	//
	// Removes the user from the organization. The users documents still exists,
	// but belong to the organization, only accessible by organization admin.
	//
	// Requires administrator privilege.
	RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserResp, error)
	// Promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PromoteUser(ctx context.Context, in *PromoteUserReq, opts ...grpc.CallOption) (*PromoteUserResp, error)
	// Demote administrator to regular user at the organization. Attempting to
	// demote the last administrator of an organization will fail
	//
	// Requires administrator privilege.
	DemoteUser(ctx context.Context, in *DemoteUserReq, opts ...grpc.CallOption) (*DemoteUserResp, error)
	// List the documents the user can access
	//
	// Administrators can see all documents belonging to the organization
	//
	// Requires Login
	ListDocuments(ctx context.Context, in *ListDocumentsReq, opts ...grpc.CallOption) (*ListDocumentsResp, error)
	// Remove document the user can access
	//
	// Admin user can remove document for the whole organization
	// Regular user only can remove document for him/herself
	//
	// Requires Login
	RemoveDocument(ctx context.Context, in *RemoveDocumentReq, opts ...grpc.CallOption) (*RemoveDocumentResp, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_UploadDocumentStreamClient, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocument(ctx context.Context, in *UploadDocReq, opts ...grpc.CallOption) (*UploadDocResp, error)
	// Download document stream
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocumentStream(ctx context.Context, in *DownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_DownloadDocumentStreamClient, error)
	// Download document
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocument(ctx context.Context, in *DownloadDocReq, opts ...grpc.CallOption) (*DownloadDocResp, error)
	// Encrypt document stream encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_EncryptDocumentStreamClient, error)
	// Encrypt document encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocument(ctx context.Context, in *EncryptDocReq, opts ...grpc.CallOption) (*EncryptDocResp, error)
	// Decrypt document stream decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	//
	// Requires Login
	DecryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_DecryptDocumentStreamClient, error)
	// Decrypt document decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	DecryptDocument(ctx context.Context, in *DecryptDocReq, opts ...grpc.CallOption) (*DecryptDocResp, error)
	// Share a document to another user
	//
	// Requires Login
	ShareDocument(ctx context.Context, in *ShareDocumentReq, opts ...grpc.CallOption) (*ShareDocumentResp, error)
	// Unshare a document that had previously been shared to a user
	//
	// Requires Login
	UnshareDocument(ctx context.Context, in *UnshareDocumentReq, opts ...grpc.CallOption) (*UnshareDocumentResp, error)
	// Obtain an authentication token to be used with other APIs
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// Logout current user
	//
	// Requires Login
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// Search within a list of user's accessible documents
	//
	// The response will include a list document id and its score when matches are found
	//
	// Requires Login
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	//Add a sharable organization to the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	AddSharableOrg(ctx context.Context, in *AddSharableOrgReq, opts ...grpc.CallOption) (*AddSharableOrgResp, error)
	//Remove a sharable organization from the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	RemoveSharableOrg(ctx context.Context, in *RemoveSharableOrgReq, opts ...grpc.CallOption) (*RemoveSharableOrgResp, error)
	//Update the organization's multi-level sharing setting
	//
	//Requires Administrator privilege.
	//Requires Login
	SetMultiLevelSharing(ctx context.Context, in *SetMultiLevelSharingReq, opts ...grpc.CallOption) (*SetMultiLevelSharingResp, error)
	//Update the organization's account info
	//
	//Requires Administrator privilege.
	//Requires Login
	SetAccountInfo(ctx context.Context, in *SetAccountInfoReq, opts ...grpc.CallOption) (*SetAccountInfoResp, error)
	//List all items of the cost breakdown and also other details such as the billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingDetails(ctx context.Context, in *GetBillingDetailsReq, opts ...grpc.CallOption) (*GetBillingDetailsResp, error)
	//Obtain the list of billing frequencies (past, current and future)
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingFrequencyList(ctx context.Context, in *GetBillingFrequencyListReq, opts ...grpc.CallOption) (*GetBillingFrequencyListResp, error)
	//Change the next billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	SetNextBillingFrequency(ctx context.Context, in *SetNextBillingFrequencyReq, opts ...grpc.CallOption) (*SetNextBillingFrequencyResp, error)
	//Obtain the list of large traffic usages
	//
	//Requires Administrator privilege
	//Requires Login
	GetLargeTraffic(ctx context.Context, in *GetLargeTrafficReq, opts ...grpc.CallOption) (*GetLargeTrafficResp, error)
	//Obtain information about the account
	//
	//Requires Administrator privilege
	//Requires Login
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error)
	// Obtain information about logged in user
	//
	// Requires Login
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	// Change the password of a logged in user
	//
	// Requires Login
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...grpc.CallOption) (*ChangeUserPasswordResp, error)
	// Set information about a logged in user
	//
	// Requires Login
	SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error)
	// Obtain a list of the org's credit cards
	//
	// Requires Administrator privilege
	// Requires Login
	ListCreditCards(ctx context.Context, in *ListCreditCardsReq, opts ...grpc.CallOption) (*ListCreditCardsResp, error)
	// Add a payment method to the customer and validate the payment method
	//
	// Requires Administrator privilege
	// Requires Login
	AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*AddPaymentMethodResp, error)
	// Set the default payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodReq, opts ...grpc.CallOption) (*SetDefaultPaymentMethodResp, error)
	// Remove a payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	RemovePaymentMethod(ctx context.Context, in *RemovePaymentMethodReq, opts ...grpc.CallOption) (*RemovePaymentMethodResp, error)
	// List payments for the organization
	//
	// Requires Administrator privilege
	// Requires Login
	ListPayments(ctx context.Context, in *ListPaymentsReq, opts ...grpc.CallOption) (*ListPaymentsResp, error)
	// Enable end to end encryption for the organization
	//
	// Requires Administrator privilege
	// Requires Login
	EnableE2EEncryption(ctx context.Context, in *EnableE2EReq, opts ...grpc.CallOption) (*EnableE2EResp, error)
	// Upload document using end to end encryption
	//
	// Requires Administrator privilege
	// Requires Login
	UploadDocumentE2E(ctx context.Context, in *UploadDocE2EReq, opts ...grpc.CallOption) (*UploadDocE2EResp, error)
	// Download document using end to end encryption
	//
	// Requires Administrator privilege
	// Requires Login
	DownloadDocumentE2E(ctx context.Context, in *DownloadDocE2EReq, opts ...grpc.CallOption) (*DownloadDocE2EResp, error)
	// Share E2E keys with other administrators
	//
	// Requires Administrator privilege
	// Requires Login
	ShareKeysE2EE(ctx context.Context, in *ShareE2EKeysReq, opts ...grpc.CallOption) (*ShareE2EKeysResp, error)
	// Share E2E document with other users
	//
	// Requires Administrator privilege
	// Requires Login
	ShareDocE2EE(ctx context.Context, in *ShareDocumentE2EReq, opts ...grpc.CallOption) (*ShareDocumentE2EResp, error)
	// Unshare E2E document
	//
	// Requires Administrator privilege
	// Requires Login
	UnshareDocE2EE(ctx context.Context, in *UnshareDocumentE2EReq, opts ...grpc.CallOption) (*UnshareDocumentE2EResp, error)
	// Get current E2EE keypair
	//
	// Requires Administrator privilege
	// Requires Login
	GetKeyE2EE(ctx context.Context, in *GetKeyE2EReq, opts ...grpc.CallOption) (*GetKeyE2EResp, error)
	// Get all E2E keypairs related to user
	//
	// Requires Administrator privilege
	// Requires Login
	GetKeysE2EE(ctx context.Context, in *GetKeysE2EReq, opts ...grpc.CallOption) (*GetKeysE2EResp, error)
	// Update user E2EE keypair
	//
	// Requires Administrator privilege
	// Requires Login
	UpdateKeyE2EE(ctx context.Context, in *UpdateE2EKeyReq, opts ...grpc.CallOption) (*UpdateE2EKeyResp, error)
	// Get file keys encrypted by E2EE key
	//
	// Requires Administrator privilege
	// Requires Login
	GetFileKeysE2EE(ctx context.Context, in *GetFileKeysE2EReq, opts ...grpc.CallOption) (*GetFileKeysE2EResp, error)
	// Update E2EE file keys
	//
	// Requires Administrator privilege
	// Requires Login
	UpdateFileKeysE2EE(ctx context.Context, in *UpdateFileKeysE2EReq, opts ...grpc.CallOption) (*UpdateFileKeysE2EResp, error)
	// Gets data related to a user's encryption keys
	//
	// Requires Login
	GetOwnKeys(ctx context.Context, in *GetOwnKeysReq, opts ...grpc.CallOption) (*GetOwnKeysResp, error)
	// Gets data needed to proceed with downloading a document
	//
	// Requires Login
	PrepareDownloadDoc(ctx context.Context, in *PrepareDownloadDocReq, opts ...grpc.CallOption) (*PrepareDownloadDocResp, error)
	// Gets data needed to proceed with sharing a document
	//
	// Requires Login
	PrepareShareDocument(ctx context.Context, in *PrepareShareDocumentReq, opts ...grpc.CallOption) (*PrepareShareDocumentResp, error)
}

type strongDocServiceClient struct {
	cc *grpc.ClientConn
}

func NewStrongDocServiceClient(cc *grpc.ClientConn) StrongDocServiceClient {
	return &strongDocServiceClient{cc}
}

func (c *strongDocServiceClient) RegisterOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error) {
	out := new(RegisterOrganizationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RegisterOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ReactivateOrganization(ctx context.Context, in *RegisterOrganizationReq, opts ...grpc.CallOption) (*RegisterOrganizationResp, error) {
	out := new(RegisterOrganizationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ReactivateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveOrganization(ctx context.Context, in *RemoveOrganizationReq, opts ...grpc.CallOption) (*RemoveOrganizationResp, error) {
	out := new(RemoveOrganizationResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error) {
	out := new(RegisterUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error) {
	out := new(ListUsersResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserResp, error) {
	out := new(RemoveUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PromoteUser(ctx context.Context, in *PromoteUserReq, opts ...grpc.CallOption) (*PromoteUserResp, error) {
	out := new(PromoteUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PromoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DemoteUser(ctx context.Context, in *DemoteUserReq, opts ...grpc.CallOption) (*DemoteUserResp, error) {
	out := new(DemoteUserResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsReq, opts ...grpc.CallOption) (*ListDocumentsResp, error) {
	out := new(ListDocumentsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveDocument(ctx context.Context, in *RemoveDocumentReq, opts ...grpc.CallOption) (*RemoveDocumentResp, error) {
	out := new(RemoveDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UploadDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_UploadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[0], "/proto.StrongDocService/UploadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceUploadDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_UploadDocumentStreamClient interface {
	Send(*UploadDocStreamReq) error
	CloseAndRecv() (*UploadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceUploadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceUploadDocumentStreamClient) Send(m *UploadDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceUploadDocumentStreamClient) CloseAndRecv() (*UploadDocStreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) UploadDocument(ctx context.Context, in *UploadDocReq, opts ...grpc.CallOption) (*UploadDocResp, error) {
	out := new(UploadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UploadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DownloadDocumentStream(ctx context.Context, in *DownloadDocStreamReq, opts ...grpc.CallOption) (StrongDocService_DownloadDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[1], "/proto.StrongDocService/DownloadDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceDownloadDocumentStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StrongDocService_DownloadDocumentStreamClient interface {
	Recv() (*DownloadDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceDownloadDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceDownloadDocumentStreamClient) Recv() (*DownloadDocStreamResp, error) {
	m := new(DownloadDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) DownloadDocument(ctx context.Context, in *DownloadDocReq, opts ...grpc.CallOption) (*DownloadDocResp, error) {
	out := new(DownloadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DownloadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) EncryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_EncryptDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[2], "/proto.StrongDocService/EncryptDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceEncryptDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_EncryptDocumentStreamClient interface {
	Send(*EncryptDocStreamReq) error
	Recv() (*EncryptDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceEncryptDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceEncryptDocumentStreamClient) Send(m *EncryptDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceEncryptDocumentStreamClient) Recv() (*EncryptDocStreamResp, error) {
	m := new(EncryptDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) EncryptDocument(ctx context.Context, in *EncryptDocReq, opts ...grpc.CallOption) (*EncryptDocResp, error) {
	out := new(EncryptDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/EncryptDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DecryptDocumentStream(ctx context.Context, opts ...grpc.CallOption) (StrongDocService_DecryptDocumentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StrongDocService_serviceDesc.Streams[3], "/proto.StrongDocService/DecryptDocumentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &strongDocServiceDecryptDocumentStreamClient{stream}
	return x, nil
}

type StrongDocService_DecryptDocumentStreamClient interface {
	Send(*DecryptDocStreamReq) error
	Recv() (*DecryptDocStreamResp, error)
	grpc.ClientStream
}

type strongDocServiceDecryptDocumentStreamClient struct {
	grpc.ClientStream
}

func (x *strongDocServiceDecryptDocumentStreamClient) Send(m *DecryptDocStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strongDocServiceDecryptDocumentStreamClient) Recv() (*DecryptDocStreamResp, error) {
	m := new(DecryptDocStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strongDocServiceClient) DecryptDocument(ctx context.Context, in *DecryptDocReq, opts ...grpc.CallOption) (*DecryptDocResp, error) {
	out := new(DecryptDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DecryptDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ShareDocument(ctx context.Context, in *ShareDocumentReq, opts ...grpc.CallOption) (*ShareDocumentResp, error) {
	out := new(ShareDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ShareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UnshareDocument(ctx context.Context, in *UnshareDocumentReq, opts ...grpc.CallOption) (*UnshareDocumentResp, error) {
	out := new(UnshareDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UnshareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) AddSharableOrg(ctx context.Context, in *AddSharableOrgReq, opts ...grpc.CallOption) (*AddSharableOrgResp, error) {
	out := new(AddSharableOrgResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/AddSharableOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemoveSharableOrg(ctx context.Context, in *RemoveSharableOrgReq, opts ...grpc.CallOption) (*RemoveSharableOrgResp, error) {
	out := new(RemoveSharableOrgResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemoveSharableOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetMultiLevelSharing(ctx context.Context, in *SetMultiLevelSharingReq, opts ...grpc.CallOption) (*SetMultiLevelSharingResp, error) {
	out := new(SetMultiLevelSharingResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetMultiLevelSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetAccountInfo(ctx context.Context, in *SetAccountInfoReq, opts ...grpc.CallOption) (*SetAccountInfoResp, error) {
	out := new(SetAccountInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetBillingDetails(ctx context.Context, in *GetBillingDetailsReq, opts ...grpc.CallOption) (*GetBillingDetailsResp, error) {
	out := new(GetBillingDetailsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetBillingDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetBillingFrequencyList(ctx context.Context, in *GetBillingFrequencyListReq, opts ...grpc.CallOption) (*GetBillingFrequencyListResp, error) {
	out := new(GetBillingFrequencyListResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetBillingFrequencyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetNextBillingFrequency(ctx context.Context, in *SetNextBillingFrequencyReq, opts ...grpc.CallOption) (*SetNextBillingFrequencyResp, error) {
	out := new(SetNextBillingFrequencyResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetNextBillingFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetLargeTraffic(ctx context.Context, in *GetLargeTrafficReq, opts ...grpc.CallOption) (*GetLargeTrafficResp, error) {
	out := new(GetLargeTrafficResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetLargeTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error) {
	out := new(GetAccountInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...grpc.CallOption) (*ChangeUserPasswordResp, error) {
	out := new(ChangeUserPasswordResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error) {
	out := new(SetUserInfoResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListCreditCards(ctx context.Context, in *ListCreditCardsReq, opts ...grpc.CallOption) (*ListCreditCardsResp, error) {
	out := new(ListCreditCardsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListCreditCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*AddPaymentMethodResp, error) {
	out := new(AddPaymentMethodResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/AddPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodReq, opts ...grpc.CallOption) (*SetDefaultPaymentMethodResp, error) {
	out := new(SetDefaultPaymentMethodResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/SetDefaultPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) RemovePaymentMethod(ctx context.Context, in *RemovePaymentMethodReq, opts ...grpc.CallOption) (*RemovePaymentMethodResp, error) {
	out := new(RemovePaymentMethodResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/RemovePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ListPayments(ctx context.Context, in *ListPaymentsReq, opts ...grpc.CallOption) (*ListPaymentsResp, error) {
	out := new(ListPaymentsResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ListPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) EnableE2EEncryption(ctx context.Context, in *EnableE2EReq, opts ...grpc.CallOption) (*EnableE2EResp, error) {
	out := new(EnableE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/EnableE2EEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UploadDocumentE2E(ctx context.Context, in *UploadDocE2EReq, opts ...grpc.CallOption) (*UploadDocE2EResp, error) {
	out := new(UploadDocE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UploadDocumentE2E", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) DownloadDocumentE2E(ctx context.Context, in *DownloadDocE2EReq, opts ...grpc.CallOption) (*DownloadDocE2EResp, error) {
	out := new(DownloadDocE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/DownloadDocumentE2E", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ShareKeysE2EE(ctx context.Context, in *ShareE2EKeysReq, opts ...grpc.CallOption) (*ShareE2EKeysResp, error) {
	out := new(ShareE2EKeysResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ShareKeysE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) ShareDocE2EE(ctx context.Context, in *ShareDocumentE2EReq, opts ...grpc.CallOption) (*ShareDocumentE2EResp, error) {
	out := new(ShareDocumentE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/ShareDocE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UnshareDocE2EE(ctx context.Context, in *UnshareDocumentE2EReq, opts ...grpc.CallOption) (*UnshareDocumentE2EResp, error) {
	out := new(UnshareDocumentE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UnshareDocE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetKeyE2EE(ctx context.Context, in *GetKeyE2EReq, opts ...grpc.CallOption) (*GetKeyE2EResp, error) {
	out := new(GetKeyE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetKeyE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetKeysE2EE(ctx context.Context, in *GetKeysE2EReq, opts ...grpc.CallOption) (*GetKeysE2EResp, error) {
	out := new(GetKeysE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetKeysE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UpdateKeyE2EE(ctx context.Context, in *UpdateE2EKeyReq, opts ...grpc.CallOption) (*UpdateE2EKeyResp, error) {
	out := new(UpdateE2EKeyResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UpdateKeyE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetFileKeysE2EE(ctx context.Context, in *GetFileKeysE2EReq, opts ...grpc.CallOption) (*GetFileKeysE2EResp, error) {
	out := new(GetFileKeysE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetFileKeysE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) UpdateFileKeysE2EE(ctx context.Context, in *UpdateFileKeysE2EReq, opts ...grpc.CallOption) (*UpdateFileKeysE2EResp, error) {
	out := new(UpdateFileKeysE2EResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/UpdateFileKeysE2EE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) GetOwnKeys(ctx context.Context, in *GetOwnKeysReq, opts ...grpc.CallOption) (*GetOwnKeysResp, error) {
	out := new(GetOwnKeysResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/GetOwnKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PrepareDownloadDoc(ctx context.Context, in *PrepareDownloadDocReq, opts ...grpc.CallOption) (*PrepareDownloadDocResp, error) {
	out := new(PrepareDownloadDocResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PrepareDownloadDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strongDocServiceClient) PrepareShareDocument(ctx context.Context, in *PrepareShareDocumentReq, opts ...grpc.CallOption) (*PrepareShareDocumentResp, error) {
	out := new(PrepareShareDocumentResp)
	err := c.cc.Invoke(ctx, "/proto.StrongDocService/PrepareShareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrongDocServiceServer is the server API for StrongDocService service.
type StrongDocServiceServer interface {
	// Registers a new organization
	//
	// The user who created the organization is automatically an administrator
	//
	// Does not require Login
	RegisterOrganization(context.Context, *RegisterOrganizationReq) (*RegisterOrganizationResp, error)
	// Reactivate an organization that was unsubscribed via aws
	//
	// The user reactivating the organization becomes the administrator
	//
	// Does not require login
	ReactivateOrganization(context.Context, *RegisterOrganizationReq) (*RegisterOrganizationResp, error)
	// Remove an organization and its search indexes
	//
	// Requires Administrator privilege. Only an administrator can remove the whole organization
	//
	// Requires Login
	RemoveOrganization(context.Context, *RemoveOrganizationReq) (*RemoveOrganizationResp, error)
	// Register new user
	//
	// Creates new user if it doesn't already exist. If the user already exist, and
	// error is thrown
	//
	// Requires administrator privilege
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	// List the users of the organization
	//
	// Requires Login
	ListUsers(context.Context, *ListUsersReq) (*ListUsersResp, error)
	// Remove user from organization
	//
	// Removes the user from the organization. The users documents still exists,
	// but belong to the organization, only accessible by organization admin.
	//
	// Requires administrator privilege.
	RemoveUser(context.Context, *RemoveUserReq) (*RemoveUserResp, error)
	// Promote a regular user to administrator at the organization
	//
	// Requires administrator privilege.
	PromoteUser(context.Context, *PromoteUserReq) (*PromoteUserResp, error)
	// Demote administrator to regular user at the organization. Attempting to
	// demote the last administrator of an organization will fail
	//
	// Requires administrator privilege.
	DemoteUser(context.Context, *DemoteUserReq) (*DemoteUserResp, error)
	// List the documents the user can access
	//
	// Administrators can see all documents belonging to the organization
	//
	// Requires Login
	ListDocuments(context.Context, *ListDocumentsReq) (*ListDocumentsResp, error)
	// Remove document the user can access
	//
	// Admin user can remove document for the whole organization
	// Regular user only can remove document for him/herself
	//
	// Requires Login
	RemoveDocument(context.Context, *RemoveDocumentReq) (*RemoveDocumentResp, error)
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocumentStream(StrongDocService_UploadDocumentStreamServer) error
	// Upload document
	//
	// User can upload document to the organization for storage
	//
	// Requires Login
	UploadDocument(context.Context, *UploadDocReq) (*UploadDocResp, error)
	// Download document stream
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocumentStream(*DownloadDocStreamReq, StrongDocService_DownloadDocumentStreamServer) error
	// Download document
	//
	// User can download the documents
	//
	// Requires Login
	DownloadDocument(context.Context, *DownloadDocReq) (*DownloadDocResp, error)
	// Encrypt document stream encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocumentStream(StrongDocService_EncryptDocumentStreamServer) error
	// Encrypt document encrypts the document and returns the ciphertext
	// back to the user without storing it.
	//
	// Requires Login
	EncryptDocument(context.Context, *EncryptDocReq) (*EncryptDocResp, error)
	// Decrypt document stream decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	//
	// Requires Login
	DecryptDocumentStream(StrongDocService_DecryptDocumentStreamServer) error
	// Decrypt document decrypts the ciphertext passed in and returns
	// decrypted plain text back to the user without storing it
	DecryptDocument(context.Context, *DecryptDocReq) (*DecryptDocResp, error)
	// Share a document to another user
	//
	// Requires Login
	ShareDocument(context.Context, *ShareDocumentReq) (*ShareDocumentResp, error)
	// Unshare a document that had previously been shared to a user
	//
	// Requires Login
	UnshareDocument(context.Context, *UnshareDocumentReq) (*UnshareDocumentResp, error)
	// Obtain an authentication token to be used with other APIs
	//
	// An authentication token will be returned after user has been validated
	// The returned token will be used as a Bearer Token and need to be set in
	// the request header
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// Logout current user
	//
	// Requires Login
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// Search within a list of user's accessible documents
	//
	// The response will include a list document id and its score when matches are found
	//
	// Requires Login
	Search(context.Context, *SearchReq) (*SearchResp, error)
	//Add a sharable organization to the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	AddSharableOrg(context.Context, *AddSharableOrgReq) (*AddSharableOrgResp, error)
	//Remove a sharable organization from the user's organization.
	//
	//Requires Administrator privilege.
	//Requires Login
	RemoveSharableOrg(context.Context, *RemoveSharableOrgReq) (*RemoveSharableOrgResp, error)
	//Update the organization's multi-level sharing setting
	//
	//Requires Administrator privilege.
	//Requires Login
	SetMultiLevelSharing(context.Context, *SetMultiLevelSharingReq) (*SetMultiLevelSharingResp, error)
	//Update the organization's account info
	//
	//Requires Administrator privilege.
	//Requires Login
	SetAccountInfo(context.Context, *SetAccountInfoReq) (*SetAccountInfoResp, error)
	//List all items of the cost breakdown and also other details such as the billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingDetails(context.Context, *GetBillingDetailsReq) (*GetBillingDetailsResp, error)
	//Obtain the list of billing frequencies (past, current and future)
	//
	//Requires Administrator privilege
	//Requires Login
	GetBillingFrequencyList(context.Context, *GetBillingFrequencyListReq) (*GetBillingFrequencyListResp, error)
	//Change the next billing frequency
	//
	//Requires Administrator privilege
	//Requires Login
	SetNextBillingFrequency(context.Context, *SetNextBillingFrequencyReq) (*SetNextBillingFrequencyResp, error)
	//Obtain the list of large traffic usages
	//
	//Requires Administrator privilege
	//Requires Login
	GetLargeTraffic(context.Context, *GetLargeTrafficReq) (*GetLargeTrafficResp, error)
	//Obtain information about the account
	//
	//Requires Administrator privilege
	//Requires Login
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error)
	// Obtain information about logged in user
	//
	// Requires Login
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	// Change the password of a logged in user
	//
	// Requires Login
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*ChangeUserPasswordResp, error)
	// Set information about a logged in user
	//
	// Requires Login
	SetUserInfo(context.Context, *SetUserInfoReq) (*SetUserInfoResp, error)
	// Obtain a list of the org's credit cards
	//
	// Requires Administrator privilege
	// Requires Login
	ListCreditCards(context.Context, *ListCreditCardsReq) (*ListCreditCardsResp, error)
	// Add a payment method to the customer and validate the payment method
	//
	// Requires Administrator privilege
	// Requires Login
	AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*AddPaymentMethodResp, error)
	// Set the default payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodReq) (*SetDefaultPaymentMethodResp, error)
	// Remove a payment method for a stripe customer
	//
	// Requires Administrator privilege
	// Requires Login
	RemovePaymentMethod(context.Context, *RemovePaymentMethodReq) (*RemovePaymentMethodResp, error)
	// List payments for the organization
	//
	// Requires Administrator privilege
	// Requires Login
	ListPayments(context.Context, *ListPaymentsReq) (*ListPaymentsResp, error)
	// Enable end to end encryption for the organization
	//
	// Requires Administrator privilege
	// Requires Login
	EnableE2EEncryption(context.Context, *EnableE2EReq) (*EnableE2EResp, error)
	// Upload document using end to end encryption
	//
	// Requires Administrator privilege
	// Requires Login
	UploadDocumentE2E(context.Context, *UploadDocE2EReq) (*UploadDocE2EResp, error)
	// Download document using end to end encryption
	//
	// Requires Administrator privilege
	// Requires Login
	DownloadDocumentE2E(context.Context, *DownloadDocE2EReq) (*DownloadDocE2EResp, error)
	// Share E2E keys with other administrators
	//
	// Requires Administrator privilege
	// Requires Login
	ShareKeysE2EE(context.Context, *ShareE2EKeysReq) (*ShareE2EKeysResp, error)
	// Share E2E document with other users
	//
	// Requires Administrator privilege
	// Requires Login
	ShareDocE2EE(context.Context, *ShareDocumentE2EReq) (*ShareDocumentE2EResp, error)
	// Unshare E2E document
	//
	// Requires Administrator privilege
	// Requires Login
	UnshareDocE2EE(context.Context, *UnshareDocumentE2EReq) (*UnshareDocumentE2EResp, error)
	// Get current E2EE keypair
	//
	// Requires Administrator privilege
	// Requires Login
	GetKeyE2EE(context.Context, *GetKeyE2EReq) (*GetKeyE2EResp, error)
	// Get all E2E keypairs related to user
	//
	// Requires Administrator privilege
	// Requires Login
	GetKeysE2EE(context.Context, *GetKeysE2EReq) (*GetKeysE2EResp, error)
	// Update user E2EE keypair
	//
	// Requires Administrator privilege
	// Requires Login
	UpdateKeyE2EE(context.Context, *UpdateE2EKeyReq) (*UpdateE2EKeyResp, error)
	// Get file keys encrypted by E2EE key
	//
	// Requires Administrator privilege
	// Requires Login
	GetFileKeysE2EE(context.Context, *GetFileKeysE2EReq) (*GetFileKeysE2EResp, error)
	// Update E2EE file keys
	//
	// Requires Administrator privilege
	// Requires Login
	UpdateFileKeysE2EE(context.Context, *UpdateFileKeysE2EReq) (*UpdateFileKeysE2EResp, error)
	// Gets data related to a user's encryption keys
	//
	// Requires Login
	GetOwnKeys(context.Context, *GetOwnKeysReq) (*GetOwnKeysResp, error)
	// Gets data needed to proceed with downloading a document
	//
	// Requires Login
	PrepareDownloadDoc(context.Context, *PrepareDownloadDocReq) (*PrepareDownloadDocResp, error)
	// Gets data needed to proceed with sharing a document
	//
	// Requires Login
	PrepareShareDocument(context.Context, *PrepareShareDocumentReq) (*PrepareShareDocumentResp, error)
}

// UnimplementedStrongDocServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStrongDocServiceServer struct {
}

func (*UnimplementedStrongDocServiceServer) RegisterOrganization(ctx context.Context, req *RegisterOrganizationReq) (*RegisterOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) ReactivateOrganization(ctx context.Context, req *RegisterOrganizationReq) (*RegisterOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveOrganization(ctx context.Context, req *RemoveOrganizationReq) (*RemoveOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganization not implemented")
}
func (*UnimplementedStrongDocServiceServer) RegisterUser(ctx context.Context, req *RegisterUserReq) (*RegisterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListUsers(ctx context.Context, req *ListUsersReq) (*ListUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveUser(ctx context.Context, req *RemoveUserReq) (*RemoveUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) PromoteUser(ctx context.Context, req *PromoteUserReq) (*PromoteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) DemoteUser(ctx context.Context, req *DemoteUserReq) (*DemoteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteUser not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListDocuments(ctx context.Context, req *ListDocumentsReq) (*ListDocumentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveDocument(ctx context.Context, req *RemoveDocumentReq) (*RemoveDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocumentStream(srv StrongDocService_UploadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocument(ctx context.Context, req *UploadDocReq) (*UploadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocumentStream(req *DownloadDocStreamReq, srv StrongDocService_DownloadDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocument(ctx context.Context, req *DownloadDocReq) (*DownloadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) EncryptDocumentStream(srv StrongDocService_EncryptDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EncryptDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) EncryptDocument(ctx context.Context, req *EncryptDocReq) (*EncryptDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) DecryptDocumentStream(srv StrongDocService_DecryptDocumentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DecryptDocumentStream not implemented")
}
func (*UnimplementedStrongDocServiceServer) DecryptDocument(ctx context.Context, req *DecryptDocReq) (*DecryptDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) ShareDocument(ctx context.Context, req *ShareDocumentReq) (*ShareDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) UnshareDocument(ctx context.Context, req *UnshareDocumentReq) (*UnshareDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareDocument not implemented")
}
func (*UnimplementedStrongDocServiceServer) Login(ctx context.Context, req *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedStrongDocServiceServer) Logout(ctx context.Context, req *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedStrongDocServiceServer) Search(ctx context.Context, req *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedStrongDocServiceServer) AddSharableOrg(ctx context.Context, req *AddSharableOrgReq) (*AddSharableOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSharableOrg not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemoveSharableOrg(ctx context.Context, req *RemoveSharableOrgReq) (*RemoveSharableOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSharableOrg not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetMultiLevelSharing(ctx context.Context, req *SetMultiLevelSharingReq) (*SetMultiLevelSharingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiLevelSharing not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetAccountInfo(ctx context.Context, req *SetAccountInfoReq) (*SetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetBillingDetails(ctx context.Context, req *GetBillingDetailsReq) (*GetBillingDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingDetails not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetBillingFrequencyList(ctx context.Context, req *GetBillingFrequencyListReq) (*GetBillingFrequencyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingFrequencyList not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetNextBillingFrequency(ctx context.Context, req *SetNextBillingFrequencyReq) (*SetNextBillingFrequencyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextBillingFrequency not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetLargeTraffic(ctx context.Context, req *GetLargeTrafficReq) (*GetLargeTrafficResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLargeTraffic not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetAccountInfo(ctx context.Context, req *GetAccountInfoReq) (*GetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetUserInfo(ctx context.Context, req *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) ChangeUserPassword(ctx context.Context, req *ChangeUserPasswordReq) (*ChangeUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetUserInfo(ctx context.Context, req *SetUserInfoReq) (*SetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserInfo not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListCreditCards(ctx context.Context, req *ListCreditCardsReq) (*ListCreditCardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditCards not implemented")
}
func (*UnimplementedStrongDocServiceServer) AddPaymentMethod(ctx context.Context, req *AddPaymentMethodReq) (*AddPaymentMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (*UnimplementedStrongDocServiceServer) SetDefaultPaymentMethod(ctx context.Context, req *SetDefaultPaymentMethodReq) (*SetDefaultPaymentMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPaymentMethod not implemented")
}
func (*UnimplementedStrongDocServiceServer) RemovePaymentMethod(ctx context.Context, req *RemovePaymentMethodReq) (*RemovePaymentMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePaymentMethod not implemented")
}
func (*UnimplementedStrongDocServiceServer) ListPayments(ctx context.Context, req *ListPaymentsReq) (*ListPaymentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayments not implemented")
}
func (*UnimplementedStrongDocServiceServer) EnableE2EEncryption(ctx context.Context, req *EnableE2EReq) (*EnableE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableE2EEncryption not implemented")
}
func (*UnimplementedStrongDocServiceServer) UploadDocumentE2E(ctx context.Context, req *UploadDocE2EReq) (*UploadDocE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocumentE2E not implemented")
}
func (*UnimplementedStrongDocServiceServer) DownloadDocumentE2E(ctx context.Context, req *DownloadDocE2EReq) (*DownloadDocE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDocumentE2E not implemented")
}
func (*UnimplementedStrongDocServiceServer) ShareKeysE2EE(ctx context.Context, req *ShareE2EKeysReq) (*ShareE2EKeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareKeysE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) ShareDocE2EE(ctx context.Context, req *ShareDocumentE2EReq) (*ShareDocumentE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) UnshareDocE2EE(ctx context.Context, req *UnshareDocumentE2EReq) (*UnshareDocumentE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareDocE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetKeyE2EE(ctx context.Context, req *GetKeyE2EReq) (*GetKeyE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetKeysE2EE(ctx context.Context, req *GetKeysE2EReq) (*GetKeysE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeysE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) UpdateKeyE2EE(ctx context.Context, req *UpdateE2EKeyReq) (*UpdateE2EKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetFileKeysE2EE(ctx context.Context, req *GetFileKeysE2EReq) (*GetFileKeysE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileKeysE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) UpdateFileKeysE2EE(ctx context.Context, req *UpdateFileKeysE2EReq) (*UpdateFileKeysE2EResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileKeysE2EE not implemented")
}
func (*UnimplementedStrongDocServiceServer) GetOwnKeys(ctx context.Context, req *GetOwnKeysReq) (*GetOwnKeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnKeys not implemented")
}
func (*UnimplementedStrongDocServiceServer) PrepareDownloadDoc(ctx context.Context, req *PrepareDownloadDocReq) (*PrepareDownloadDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareDownloadDoc not implemented")
}
func (*UnimplementedStrongDocServiceServer) PrepareShareDocument(ctx context.Context, req *PrepareShareDocumentReq) (*PrepareShareDocumentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareShareDocument not implemented")
}

func RegisterStrongDocServiceServer(s *grpc.Server, srv StrongDocServiceServer) {
	s.RegisterService(&_StrongDocService_serviceDesc, srv)
}

func _StrongDocService_RegisterOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RegisterOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RegisterOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RegisterOrganization(ctx, req.(*RegisterOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ReactivateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ReactivateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ReactivateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ReactivateOrganization(ctx, req.(*RegisterOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveOrganization(ctx, req.(*RemoveOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListUsers(ctx, req.(*ListUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveUser(ctx, req.(*RemoveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PromoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PromoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PromoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PromoteUser(ctx, req.(*PromoteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DemoteUser(ctx, req.(*DemoteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListDocuments(ctx, req.(*ListDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveDocument(ctx, req.(*RemoveDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UploadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).UploadDocumentStream(&strongDocServiceUploadDocumentStreamServer{stream})
}

type StrongDocService_UploadDocumentStreamServer interface {
	SendAndClose(*UploadDocStreamResp) error
	Recv() (*UploadDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceUploadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceUploadDocumentStreamServer) SendAndClose(m *UploadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceUploadDocumentStreamServer) Recv() (*UploadDocStreamReq, error) {
	m := new(UploadDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UploadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UploadDocument(ctx, req.(*UploadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DownloadDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDocStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrongDocServiceServer).DownloadDocumentStream(m, &strongDocServiceDownloadDocumentStreamServer{stream})
}

type StrongDocService_DownloadDocumentStreamServer interface {
	Send(*DownloadDocStreamResp) error
	grpc.ServerStream
}

type strongDocServiceDownloadDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceDownloadDocumentStreamServer) Send(m *DownloadDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _StrongDocService_DownloadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DownloadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DownloadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DownloadDocument(ctx, req.(*DownloadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_EncryptDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).EncryptDocumentStream(&strongDocServiceEncryptDocumentStreamServer{stream})
}

type StrongDocService_EncryptDocumentStreamServer interface {
	Send(*EncryptDocStreamResp) error
	Recv() (*EncryptDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceEncryptDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceEncryptDocumentStreamServer) Send(m *EncryptDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceEncryptDocumentStreamServer) Recv() (*EncryptDocStreamReq, error) {
	m := new(EncryptDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_EncryptDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).EncryptDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/EncryptDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).EncryptDocument(ctx, req.(*EncryptDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DecryptDocumentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrongDocServiceServer).DecryptDocumentStream(&strongDocServiceDecryptDocumentStreamServer{stream})
}

type StrongDocService_DecryptDocumentStreamServer interface {
	Send(*DecryptDocStreamResp) error
	Recv() (*DecryptDocStreamReq, error)
	grpc.ServerStream
}

type strongDocServiceDecryptDocumentStreamServer struct {
	grpc.ServerStream
}

func (x *strongDocServiceDecryptDocumentStreamServer) Send(m *DecryptDocStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strongDocServiceDecryptDocumentStreamServer) Recv() (*DecryptDocStreamReq, error) {
	m := new(DecryptDocStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StrongDocService_DecryptDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DecryptDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DecryptDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DecryptDocument(ctx, req.(*DecryptDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ShareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ShareDocument(ctx, req.(*ShareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UnshareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UnshareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UnshareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UnshareDocument(ctx, req.(*UnshareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_AddSharableOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSharableOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).AddSharableOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/AddSharableOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).AddSharableOrg(ctx, req.(*AddSharableOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemoveSharableOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSharableOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemoveSharableOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemoveSharableOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemoveSharableOrg(ctx, req.(*RemoveSharableOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetMultiLevelSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMultiLevelSharingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetMultiLevelSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetMultiLevelSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetMultiLevelSharing(ctx, req.(*SetMultiLevelSharingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetAccountInfo(ctx, req.(*SetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetBillingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetBillingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetBillingDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetBillingDetails(ctx, req.(*GetBillingDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetBillingFrequencyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingFrequencyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetBillingFrequencyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetBillingFrequencyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetBillingFrequencyList(ctx, req.(*GetBillingFrequencyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetNextBillingFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextBillingFrequencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetNextBillingFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetNextBillingFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetNextBillingFrequency(ctx, req.(*SetNextBillingFrequencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetLargeTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLargeTrafficReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetLargeTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetLargeTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetLargeTraffic(ctx, req.(*GetLargeTrafficReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetUserInfo(ctx, req.(*SetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListCreditCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListCreditCards(ctx, req.(*ListCreditCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).AddPaymentMethod(ctx, req.(*AddPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_SetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).SetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/SetDefaultPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).SetDefaultPaymentMethod(ctx, req.(*SetDefaultPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_RemovePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).RemovePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/RemovePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).RemovePaymentMethod(ctx, req.(*RemovePaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ListPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ListPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ListPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ListPayments(ctx, req.(*ListPaymentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_EnableE2EEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).EnableE2EEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/EnableE2EEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).EnableE2EEncryption(ctx, req.(*EnableE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UploadDocumentE2E_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UploadDocumentE2E(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UploadDocumentE2E",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UploadDocumentE2E(ctx, req.(*UploadDocE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_DownloadDocumentE2E_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDocE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).DownloadDocumentE2E(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/DownloadDocumentE2E",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).DownloadDocumentE2E(ctx, req.(*DownloadDocE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ShareKeysE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareE2EKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ShareKeysE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ShareKeysE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ShareKeysE2EE(ctx, req.(*ShareE2EKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_ShareDocE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).ShareDocE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/ShareDocE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).ShareDocE2EE(ctx, req.(*ShareDocumentE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UnshareDocE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareDocumentE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UnshareDocE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UnshareDocE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UnshareDocE2EE(ctx, req.(*UnshareDocumentE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetKeyE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetKeyE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetKeyE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetKeyE2EE(ctx, req.(*GetKeyE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetKeysE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetKeysE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetKeysE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetKeysE2EE(ctx, req.(*GetKeysE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UpdateKeyE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateE2EKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UpdateKeyE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UpdateKeyE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UpdateKeyE2EE(ctx, req.(*UpdateE2EKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetFileKeysE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileKeysE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetFileKeysE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetFileKeysE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetFileKeysE2EE(ctx, req.(*GetFileKeysE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_UpdateFileKeysE2EE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileKeysE2EReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).UpdateFileKeysE2EE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/UpdateFileKeysE2EE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).UpdateFileKeysE2EE(ctx, req.(*UpdateFileKeysE2EReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_GetOwnKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).GetOwnKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/GetOwnKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).GetOwnKeys(ctx, req.(*GetOwnKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PrepareDownloadDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareDownloadDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PrepareDownloadDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PrepareDownloadDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PrepareDownloadDoc(ctx, req.(*PrepareDownloadDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrongDocService_PrepareShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareShareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrongDocServiceServer).PrepareShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StrongDocService/PrepareShareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrongDocServiceServer).PrepareShareDocument(ctx, req.(*PrepareShareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StrongDocService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StrongDocService",
	HandlerType: (*StrongDocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrganization",
			Handler:    _StrongDocService_RegisterOrganization_Handler,
		},
		{
			MethodName: "ReactivateOrganization",
			Handler:    _StrongDocService_ReactivateOrganization_Handler,
		},
		{
			MethodName: "RemoveOrganization",
			Handler:    _StrongDocService_RemoveOrganization_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _StrongDocService_RegisterUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _StrongDocService_ListUsers_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _StrongDocService_RemoveUser_Handler,
		},
		{
			MethodName: "PromoteUser",
			Handler:    _StrongDocService_PromoteUser_Handler,
		},
		{
			MethodName: "DemoteUser",
			Handler:    _StrongDocService_DemoteUser_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _StrongDocService_ListDocuments_Handler,
		},
		{
			MethodName: "RemoveDocument",
			Handler:    _StrongDocService_RemoveDocument_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _StrongDocService_UploadDocument_Handler,
		},
		{
			MethodName: "DownloadDocument",
			Handler:    _StrongDocService_DownloadDocument_Handler,
		},
		{
			MethodName: "EncryptDocument",
			Handler:    _StrongDocService_EncryptDocument_Handler,
		},
		{
			MethodName: "DecryptDocument",
			Handler:    _StrongDocService_DecryptDocument_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _StrongDocService_ShareDocument_Handler,
		},
		{
			MethodName: "UnshareDocument",
			Handler:    _StrongDocService_UnshareDocument_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StrongDocService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _StrongDocService_Logout_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _StrongDocService_Search_Handler,
		},
		{
			MethodName: "AddSharableOrg",
			Handler:    _StrongDocService_AddSharableOrg_Handler,
		},
		{
			MethodName: "RemoveSharableOrg",
			Handler:    _StrongDocService_RemoveSharableOrg_Handler,
		},
		{
			MethodName: "SetMultiLevelSharing",
			Handler:    _StrongDocService_SetMultiLevelSharing_Handler,
		},
		{
			MethodName: "SetAccountInfo",
			Handler:    _StrongDocService_SetAccountInfo_Handler,
		},
		{
			MethodName: "GetBillingDetails",
			Handler:    _StrongDocService_GetBillingDetails_Handler,
		},
		{
			MethodName: "GetBillingFrequencyList",
			Handler:    _StrongDocService_GetBillingFrequencyList_Handler,
		},
		{
			MethodName: "SetNextBillingFrequency",
			Handler:    _StrongDocService_SetNextBillingFrequency_Handler,
		},
		{
			MethodName: "GetLargeTraffic",
			Handler:    _StrongDocService_GetLargeTraffic_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _StrongDocService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _StrongDocService_GetUserInfo_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _StrongDocService_ChangeUserPassword_Handler,
		},
		{
			MethodName: "SetUserInfo",
			Handler:    _StrongDocService_SetUserInfo_Handler,
		},
		{
			MethodName: "ListCreditCards",
			Handler:    _StrongDocService_ListCreditCards_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _StrongDocService_AddPaymentMethod_Handler,
		},
		{
			MethodName: "SetDefaultPaymentMethod",
			Handler:    _StrongDocService_SetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "RemovePaymentMethod",
			Handler:    _StrongDocService_RemovePaymentMethod_Handler,
		},
		{
			MethodName: "ListPayments",
			Handler:    _StrongDocService_ListPayments_Handler,
		},
		{
			MethodName: "EnableE2EEncryption",
			Handler:    _StrongDocService_EnableE2EEncryption_Handler,
		},
		{
			MethodName: "UploadDocumentE2E",
			Handler:    _StrongDocService_UploadDocumentE2E_Handler,
		},
		{
			MethodName: "DownloadDocumentE2E",
			Handler:    _StrongDocService_DownloadDocumentE2E_Handler,
		},
		{
			MethodName: "ShareKeysE2EE",
			Handler:    _StrongDocService_ShareKeysE2EE_Handler,
		},
		{
			MethodName: "ShareDocE2EE",
			Handler:    _StrongDocService_ShareDocE2EE_Handler,
		},
		{
			MethodName: "UnshareDocE2EE",
			Handler:    _StrongDocService_UnshareDocE2EE_Handler,
		},
		{
			MethodName: "GetKeyE2EE",
			Handler:    _StrongDocService_GetKeyE2EE_Handler,
		},
		{
			MethodName: "GetKeysE2EE",
			Handler:    _StrongDocService_GetKeysE2EE_Handler,
		},
		{
			MethodName: "UpdateKeyE2EE",
			Handler:    _StrongDocService_UpdateKeyE2EE_Handler,
		},
		{
			MethodName: "GetFileKeysE2EE",
			Handler:    _StrongDocService_GetFileKeysE2EE_Handler,
		},
		{
			MethodName: "UpdateFileKeysE2EE",
			Handler:    _StrongDocService_UpdateFileKeysE2EE_Handler,
		},
		{
			MethodName: "GetOwnKeys",
			Handler:    _StrongDocService_GetOwnKeys_Handler,
		},
		{
			MethodName: "PrepareDownloadDoc",
			Handler:    _StrongDocService_PrepareDownloadDoc_Handler,
		},
		{
			MethodName: "PrepareShareDocument",
			Handler:    _StrongDocService_PrepareShareDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDocumentStream",
			Handler:       _StrongDocService_UploadDocumentStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadDocumentStream",
			Handler:       _StrongDocService_DownloadDocumentStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EncryptDocumentStream",
			Handler:       _StrongDocService_EncryptDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DecryptDocumentStream",
			Handler:       _StrongDocService_DecryptDocumentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strongdoc.proto",
}
